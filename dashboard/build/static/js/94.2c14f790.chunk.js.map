{"version":3,"file":"static/js/94.2c14f790.chunk.js","mappings":"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","sources":["SurveyResultsDashboard.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from 'react';\r\nimport { Card, CardContent, Typography, Accordion, AccordionSummary, AccordionDetails, CircularProgress, List, ListItem, ListItemText, Box, Alert } from '@mui/material';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport axios from 'axios';\r\n\r\nfunction SurveyResultsDashboard() {\r\n  const [surveys, setSurveys] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n\r\n  const fetchSurveyResults = useCallback(async () => {\r\n    // Only fetch if component is expanded (accordion open)\r\n    if (!isExpanded && surveys.length > 0) {\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await axios.get('/api/surveys');\r\n      setSurveys(response.data.reverse()); // Reverse to show newest first\r\n    } catch (err) {\r\n      console.error('Error fetching survey results:', err);\r\n      setError('No se pudieron cargar los resultados de la encuesta.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [isExpanded, surveys.length]);\r\n\r\n  useEffect(() => {\r\n    // Only start polling when expanded\r\n    if (isExpanded) {\r\n      fetchSurveyResults();\r\n      const interval = setInterval(fetchSurveyResults, 30000); // Refresh every 30 seconds (reduced from 10s)\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [isExpanded, fetchSurveyResults]);\r\n\r\n  const calculateStats = useMemo(() => {\r\n    if (surveys.length === 0) {\r\n      return { average: 0, distribution: {}, lowRatings: [] };\r\n    }\r\n\r\n    let totalRating = 0;\r\n    const distribution = { 0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };\r\n    const lowRatings = [];\r\n\r\n    surveys.forEach(survey => {\r\n      totalRating += survey.rating;\r\n      distribution[survey.rating]++;\r\n      if (survey.rating <= 2) {\r\n        lowRatings.push(survey);\r\n      }\r\n    });\r\n\r\n    const average = (totalRating / surveys.length).toFixed(2);\r\n\r\n    return { average, distribution, lowRatings };\r\n  }, [surveys]); // Memoize calculation - only recalculate when surveys change\r\n\r\n  const { average, distribution, lowRatings } = calculateStats;\r\n\r\n  const handleAccordionChange = useCallback((event, expanded) => {\r\n    setIsExpanded(expanded);\r\n  }, []);\r\n\r\n  return (\r\n    <Card style={{ marginTop: '2rem' }}>\r\n      <CardContent>\r\n        <Accordion onChange={handleAccordionChange}>\r\n          <AccordionSummary\r\n            expandIcon={<ExpandMoreIcon />}\r\n            aria-controls=\"survey-results-content\"\r\n            id=\"survey-results-header\"\r\n          >\r\n            <Typography variant=\"h5\">Dashboard de Resultados de Encuestas</Typography>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n            {loading && <Box display=\"flex\" justifyContent=\"center\"><CircularProgress /></Box>}\r\n            {error && <Alert severity=\"error\">{error}</Alert>}\r\n            {!loading && !error && surveys.length === 0 && (\r\n              <Typography>No hay resultados de encuestas para mostrar.</Typography>\r\n            )}\r\n            {!loading && !error && surveys.length > 0 && (\r\n              <Box>\r\n                <Typography variant=\"h6\">Estadísticas Generales</Typography>\r\n                <Typography>Calificación Promedio: {average}</Typography>\r\n                <Typography>Distribución de Calificaciones:</Typography>\r\n                <List dense>\r\n                  {Object.entries(distribution).map(([rating, count]) => (\r\n                    <ListItem key={rating}>\r\n                      <ListItemText primary={`Calificación ${rating}: ${count} veces`}\r\n                      />\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n\r\n                {lowRatings.length > 0 && (\r\n                  <Box mt={2}>\r\n                    <Typography variant=\"h6\" color=\"error\">Calificaciones Bajas (0-2)</Typography>\r\n                    <List dense>\r\n                      {lowRatings.map((survey, index) => (\r\n                        <ListItem key={index}>\r\n                          <ListItemText\r\n                            primary={`Cliente: ${survey.from} - Calificación: ${survey.rating}`}\r\n                            secondary={`Fecha: ${new Date(survey.timestamp).toLocaleString()}`}\r\n                          />\r\n                        </ListItem>\r\n                      ))}\r\n                    </List>\r\n                  </Box>\r\n                )}\r\n              </Box>\r\n            )}\r\n          </AccordionDetails>\r\n        </Accordion>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default SurveyResultsDashboard;\r\n"],"names":["surveys","setSurveys","useState","loading","setLoading","error","setError","isExpanded","setIsExpanded","fetchSurveyResults","useCallback","async","length","response","axios","get","data","reverse","err","console","useEffect","interval","setInterval","clearInterval","calculateStats","useMemo","average","distribution","lowRatings","totalRating","forEach","survey","rating","push","toFixed","handleAccordionChange","event","expanded","_jsx","Card","style","marginTop","children","CardContent","_jsxs","Accordion","onChange","AccordionSummary","expandIcon","ExpandMoreIcon","id","Typography","variant","AccordionDetails","Box","display","justifyContent","CircularProgress","Alert","severity","List","dense","Object","entries","map","_ref","count","ListItem","ListItemText","primary","concat","mt","color","index","from","secondary","Date","timestamp","toLocaleString"],"sourceRoot":""}