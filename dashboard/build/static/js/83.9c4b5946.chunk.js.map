{"version":3,"file":"static/js/83.9c4b5946.chunk.js","mappings":"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","sources":["marketing/CampaignOverview.js","marketing/CampaignList.js","marketing/CampaignMetricsChart.js","marketing/StatusDistributionChart.js","MarketingDashboard.js"],"sourcesContent":["import React from 'react';\r\nimport { Card, CardContent, Typography, Box, Chip } from '@mui/material';\r\nimport TrendingUpIcon from '@mui/icons-material/TrendingUp';\r\nimport TrendingDownIcon from '@mui/icons-material/TrendingDown';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport DoneAllIcon from '@mui/icons-material/DoneAll';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\n\r\nconst MetricCard = ({ title, value, percentage, icon: Icon, color, threshold }) => {\r\n  const getStatusColor = () => {\r\n    if (!threshold) return color;\r\n\r\n    const numValue = parseFloat(percentage);\r\n    if (threshold.type === 'min') {\r\n      if (numValue >= threshold.excellent) return '#4caf50'; // Verde\r\n      if (numValue >= threshold.acceptable) return '#ff9800'; // Naranja\r\n      return '#f44336'; // Rojo\r\n    } else {\r\n      if (numValue <= threshold.excellent) return '#4caf50';\r\n      if (numValue <= threshold.acceptable) return '#ff9800';\r\n      return '#f44336';\r\n    }\r\n  };\r\n\r\n  const statusColor = getStatusColor();\r\n\r\n  return (\r\n    <Card\r\n      sx={{\r\n        height: '100%',\r\n        background: 'linear-gradient(135deg, #ffffff 0%, #f5f5f5 100%)',\r\n        boxShadow: '0 4px 6px rgba(0,0,0,0.1)',\r\n        transition: 'transform 0.2s, box-shadow 0.2s',\r\n        '&:hover': {\r\n          transform: 'translateY(-4px)',\r\n          boxShadow: '0 8px 12px rgba(0,0,0,0.15)',\r\n        }\r\n      }}\r\n    >\r\n      <CardContent>\r\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n          <Box\r\n            sx={{\r\n              backgroundColor: `${statusColor}20`,\r\n              borderRadius: '12px',\r\n              p: 1.5,\r\n              display: 'flex',\r\n              mr: 2\r\n            }}\r\n          >\r\n            <Icon sx={{ color: statusColor, fontSize: 32 }} />\r\n          </Box>\r\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1, fontWeight: 600 }}>\r\n            {title}\r\n          </Typography>\r\n        </Box>\r\n\r\n        <Typography variant=\"h3\" component=\"div\" sx={{ fontWeight: 700, mb: 1 }}>\r\n          {value}\r\n        </Typography>\r\n\r\n        {percentage && (\r\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n            <Chip\r\n              label={`${percentage}%`}\r\n              size=\"small\"\r\n              sx={{\r\n                backgroundColor: statusColor,\r\n                color: 'white',\r\n                fontWeight: 600,\r\n              }}\r\n            />\r\n            {parseFloat(percentage) > 50 ? (\r\n              <TrendingUpIcon sx={{ color: statusColor, fontSize: 20 }} />\r\n            ) : (\r\n              <TrendingDownIcon sx={{ color: statusColor, fontSize: 20 }} />\r\n            )}\r\n          </Box>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nfunction CampaignOverview({ stats }) {\r\n  if (!stats || !stats.stats) {\r\n    return (\r\n      <Box sx={{ textAlign: 'center', py: 4 }}>\r\n        <Typography variant=\"body1\" color=\"text.secondary\">\r\n          No hay datos disponibles\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  const { totalSent, delivered, read, reactions, deliveryRate, readRate, engagementRate } = stats.stats;\r\n\r\n  const metrics = [\r\n    {\r\n      title: 'Total Enviados',\r\n      value: totalSent.toLocaleString(),\r\n      icon: SendIcon,\r\n      color: '#2196f3',\r\n    },\r\n    {\r\n      title: 'Tasa de Entrega',\r\n      value: delivered.toLocaleString(),\r\n      percentage: deliveryRate.toFixed(1),\r\n      icon: DoneAllIcon,\r\n      color: '#4caf50',\r\n      threshold: {\r\n        type: 'min',\r\n        excellent: 85,\r\n        acceptable: 75,\r\n      },\r\n    },\r\n    {\r\n      title: 'Tasa de Lectura',\r\n      value: read.toLocaleString(),\r\n      percentage: readRate.toFixed(1),\r\n      icon: VisibilityIcon,\r\n      color: '#ff9800',\r\n      threshold: {\r\n        type: 'min',\r\n        excellent: 30,\r\n        acceptable: 15,\r\n      },\r\n    },\r\n    {\r\n      title: 'Engagement',\r\n      value: reactions.toLocaleString(),\r\n      percentage: engagementRate.toFixed(1),\r\n      icon: FavoriteIcon,\r\n      color: '#e91e63',\r\n      threshold: {\r\n        type: 'min',\r\n        excellent: 5,\r\n        acceptable: 2,\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', sm: '1fr 1fr', md: 'repeat(4, 1fr)' }, gap: 3 }}>\r\n      {metrics.map((metric, index) => (\r\n        <MetricCard key={index} {...metric} />\r\n      ))}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default CampaignOverview;\r\n","import React from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  List,\r\n  ListItem,\r\n  ListItemButton,\r\n  ListItemText,\r\n  ListItemIcon,\r\n  Chip,\r\n  Box,\r\n  Divider,\r\n} from '@mui/material';\r\nimport CampaignIcon from '@mui/icons-material/Campaign';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport PauseCircleIcon from '@mui/icons-material/PauseCircle';\r\nimport { format } from 'date-fns';\r\nimport { es } from 'date-fns/locale';\r\n\r\nfunction CampaignList({ campaigns, selectedCampaignId, onSelectCampaign, loading }) {\r\n  if (loading) {\r\n    return (\r\n      <Card>\r\n        <CardContent>\r\n          <Box sx={{ textAlign: 'center', py: 3 }}>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              Cargando campanas...\r\n            </Typography>\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (!campaigns || campaigns.length === 0) {\r\n    return (\r\n      <Card>\r\n        <CardContent>\r\n          <Box sx={{ textAlign: 'center', py: 3 }}>\r\n            <CampaignIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />\r\n            <Typography variant=\"body1\" color=\"text.secondary\">\r\n              No hay campanas disponibles\r\n            </Typography>\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardContent sx={{ p: 0 }}>\r\n        <Box sx={{ p: 2, pb: 1 }}>\r\n          <Typography variant=\"h6\" component=\"div\" sx={{ fontWeight: 600 }}>\r\n            Campanas ({campaigns.length})\r\n          </Typography>\r\n        </Box>\r\n        <Divider />\r\n        <List sx={{ py: 0 }}>\r\n          {campaigns.map((campaign, index) => (\r\n            <React.Fragment key={campaign.id}>\r\n              <ListItem disablePadding>\r\n                <ListItemButton\r\n                  selected={selectedCampaignId === campaign.id}\r\n                  onClick={() => onSelectCampaign(campaign.id)}\r\n                  sx={{\r\n                    py: 2,\r\n                    '&.Mui-selected': {\r\n                      backgroundColor: 'primary.light',\r\n                      '&:hover': {\r\n                        backgroundColor: 'primary.light',\r\n                      },\r\n                    },\r\n                  }}\r\n                >\r\n                  <ListItemIcon>\r\n                    {campaign.active ? (\r\n                      <CheckCircleIcon color=\"success\" />\r\n                    ) : (\r\n                      <PauseCircleIcon color=\"disabled\" />\r\n                    )}\r\n                  </ListItemIcon>\r\n                  <ListItemText\r\n                    primary={\r\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                        <Typography variant=\"subtitle1\" component=\"span\" sx={{ fontWeight: 600 }}>\r\n                          {campaign.name}\r\n                        </Typography>\r\n                        {campaign.active ? (\r\n                          <Chip label=\"Activa\" size=\"small\" color=\"success\" />\r\n                        ) : (\r\n                          <Chip label=\"Pausada\" size=\"small\" color=\"default\" />\r\n                        )}\r\n                      </Box>\r\n                    }\r\n                    secondary={\r\n                      <Box sx={{ mt: 0.5 }}>\r\n                        <Typography variant=\"caption\" display=\"block\" color=\"text.secondary\">\r\n                          {campaign.description}\r\n                        </Typography>\r\n                        <Typography variant=\"caption\" display=\"block\" color=\"text.secondary\">\r\n                          Creada: {format(new Date(campaign.created), \"d 'de' MMMM, yyyy\", { locale: es })}\r\n                        </Typography>\r\n                        {campaign.stats && (\r\n                          <Box sx={{ display: 'flex', gap: 2, mt: 1 }}>\r\n                            <Typography variant=\"caption\" sx={{ color: 'primary.main' }}>\r\n                              {campaign.stats.totalSent} enviados\r\n                            </Typography>\r\n                            <Typography variant=\"caption\" sx={{ color: 'success.main' }}>\r\n                              {campaign.stats.delivered} entregados\r\n                            </Typography>\r\n                            <Typography variant=\"caption\" sx={{ color: 'info.main' }}>\r\n                              {campaign.stats.read} leidos\r\n                            </Typography>\r\n                          </Box>\r\n                        )}\r\n                      </Box>\r\n                    }\r\n                  />\r\n                </ListItemButton>\r\n              </ListItem>\r\n              {index < campaigns.length - 1 && <Divider />}\r\n            </React.Fragment>\r\n          ))}\r\n        </List>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default CampaignList;\r\n","import React from 'react';\r\nimport { Card, CardContent, Typography, Box } from '@mui/material';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport { format } from 'date-fns';\r\nimport { es } from 'date-fns/locale';\r\n\r\nconst CustomTooltip = ({ active, payload, label }) => {\r\n  if (active && payload && payload.length) {\r\n    return (\r\n      <Box\r\n        sx={{\r\n          backgroundColor: 'white',\r\n          border: '1px solid #ccc',\r\n          borderRadius: 1,\r\n          p: 1.5,\r\n          boxShadow: '0 2px 8px rgba(0,0,0,0.15)',\r\n        }}\r\n      >\r\n        <Typography variant=\"caption\" sx={{ fontWeight: 600, display: 'block', mb: 1 }}>\r\n          {label}\r\n        </Typography>\r\n        {payload.map((entry, index) => (\r\n          <Typography key={index} variant=\"caption\" sx={{ color: entry.color, display: 'block' }}>\r\n            {entry.name}: {entry.value}\r\n          </Typography>\r\n        ))}\r\n      </Box>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nfunction CampaignMetricsChart({ messages }) {\r\n  if (!messages || messages.length === 0) {\r\n    return (\r\n      <Card>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Evolucion Temporal\r\n          </Typography>\r\n          <Box sx={{ textAlign: 'center', py: 4 }}>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              No hay datos suficientes para mostrar el grafico\r\n            </Typography>\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  // Agrupar mensajes por hora\r\n  const groupedData = messages.reduce((acc, message) => {\r\n    const timestamp = message.timestamps.sent;\r\n    const hour = format(new Date(timestamp), 'HH:00', { locale: es });\r\n\r\n    if (!acc[hour]) {\r\n      acc[hour] = {\r\n        hour,\r\n        enviados: 0,\r\n        entregados: 0,\r\n        leidos: 0,\r\n      };\r\n    }\r\n\r\n    acc[hour].enviados += 1;\r\n    if (['delivered', 'read'].includes(message.status)) {\r\n      acc[hour].entregados += 1;\r\n    }\r\n    if (message.status === 'read') {\r\n      acc[hour].leidos += 1;\r\n    }\r\n\r\n    return acc;\r\n  }, {});\r\n\r\n  const chartData = Object.values(groupedData).sort((a, b) => a.hour.localeCompare(b.hour));\r\n\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 600 }}>\r\n          Evolucion Temporal\r\n        </Typography>\r\n        <Box sx={{ width: '100%', height: 350, mt: 2 }}>\r\n          <ResponsiveContainer>\r\n            <LineChart data={chartData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\r\n              <XAxis\r\n                dataKey=\"hour\"\r\n                stroke=\"#666\"\r\n                style={{ fontSize: '12px' }}\r\n              />\r\n              <YAxis\r\n                stroke=\"#666\"\r\n                style={{ fontSize: '12px' }}\r\n              />\r\n              <Tooltip content={<CustomTooltip />} />\r\n              <Legend\r\n                wrapperStyle={{ fontSize: '14px' }}\r\n                iconType=\"line\"\r\n              />\r\n              <Line\r\n                type=\"monotone\"\r\n                dataKey=\"enviados\"\r\n                stroke=\"#2196f3\"\r\n                strokeWidth={2}\r\n                dot={{ r: 4 }}\r\n                activeDot={{ r: 6 }}\r\n                name=\"Enviados\"\r\n              />\r\n              <Line\r\n                type=\"monotone\"\r\n                dataKey=\"entregados\"\r\n                stroke=\"#4caf50\"\r\n                strokeWidth={2}\r\n                dot={{ r: 4 }}\r\n                activeDot={{ r: 6 }}\r\n                name=\"Entregados\"\r\n              />\r\n              <Line\r\n                type=\"monotone\"\r\n                dataKey=\"leidos\"\r\n                stroke=\"#ff9800\"\r\n                strokeWidth={2}\r\n                dot={{ r: 4 }}\r\n                activeDot={{ r: 6 }}\r\n                name=\"Leidos\"\r\n              />\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default CampaignMetricsChart;\r\n","import React from 'react';\r\nimport { Card, CardContent, Typography, Box } from '@mui/material';\r\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from 'recharts';\r\n\r\nconst COLORS = {\r\n  sent: '#00bcd4',      // Cyan - En transito\r\n  delivered: '#4caf50', // Verde - Entregados\r\n  read: '#2196f3',      // Azul - Leidos\r\n  failed: '#f44336',    // Rojo - Fallidos\r\n};\r\n\r\nconst CustomTooltip = ({ active, payload }) => {\r\n  if (active && payload && payload.length) {\r\n    const data = payload[0];\r\n    return (\r\n      <Box\r\n        sx={{\r\n          backgroundColor: 'white',\r\n          border: '1px solid #ccc',\r\n          borderRadius: 1,\r\n          p: 1.5,\r\n          boxShadow: '0 2px 8px rgba(0,0,0,0.15)',\r\n        }}\r\n      >\r\n        <Typography variant=\"caption\" sx={{ fontWeight: 600, display: 'block' }}>\r\n          {data.name}\r\n        </Typography>\r\n        <Typography variant=\"caption\" sx={{ display: 'block' }}>\r\n          Cantidad: {data.value}\r\n        </Typography>\r\n        <Typography variant=\"caption\" sx={{ display: 'block' }}>\r\n          Porcentaje: {data.payload.percentage}%\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nconst renderLabel = (entry) => {\r\n  return `${entry.percentage}%`;\r\n};\r\n\r\nfunction StatusDistributionChart({ stats }) {\r\n  if (!stats || !stats.messages || !stats.messages.byStatus) {\r\n    return (\r\n      <Card>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Distribucion de Estados\r\n          </Typography>\r\n          <Box sx={{ textAlign: 'center', py: 4 }}>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              No hay datos disponibles\r\n            </Typography>\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  const { byStatus } = stats.messages;\r\n  const total = Object.values(byStatus).reduce((sum, count) => sum + count, 0);\r\n\r\n  const data = Object.entries(byStatus)\r\n    .filter(([_, count]) => count > 0)\r\n    .map(([status, count]) => ({\r\n      name: status === 'sent' ? 'En transito' : status === 'delivered' ? 'Entregados' : status === 'read' ? 'Leidos' : 'Fallidos',\r\n      value: count,\r\n      percentage: ((count / total) * 100).toFixed(1),\r\n      status,\r\n    }));\r\n\r\n  if (data.length === 0) {\r\n    return (\r\n      <Card>\r\n        <CardContent>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Distribucion de Estados\r\n          </Typography>\r\n          <Box sx={{ textAlign: 'center', py: 4 }}>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              No hay mensajes para mostrar\r\n            </Typography>\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Typography variant=\"h6\" gutterBottom sx={{ fontWeight: 600 }}>\r\n          Distribucion de Estados\r\n        </Typography>\r\n        <Box sx={{ width: '100%', height: 350, mt: 2 }}>\r\n          <ResponsiveContainer>\r\n            <PieChart>\r\n              <Pie\r\n                data={data}\r\n                cx=\"50%\"\r\n                cy=\"50%\"\r\n                labelLine={false}\r\n                label={renderLabel}\r\n                outerRadius={100}\r\n                fill=\"#8884d8\"\r\n                dataKey=\"value\"\r\n              >\r\n                {data.map((entry, index) => (\r\n                  <Cell key={`cell-${index}`} fill={COLORS[entry.status]} />\r\n                ))}\r\n              </Pie>\r\n              <Tooltip content={<CustomTooltip />} />\r\n              <Legend\r\n                verticalAlign=\"bottom\"\r\n                height={36}\r\n                wrapperStyle={{ fontSize: '14px' }}\r\n              />\r\n            </PieChart>\r\n          </ResponsiveContainer>\r\n        </Box>\r\n        <Box sx={{ mt: 2, display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 2 }}>\r\n          {data.map((entry) => (\r\n            <Box key={entry.status} sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n              <Box\r\n                sx={{\r\n                  width: 12,\r\n                  height: 12,\r\n                  borderRadius: '50%',\r\n                  backgroundColor: COLORS[entry.status],\r\n                }}\r\n              />\r\n              <Typography variant=\"body2\">\r\n                <strong>{entry.name}:</strong> {entry.value} ({entry.percentage}%)\r\n              </Typography>\r\n            </Box>\r\n          ))}\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default StatusDistributionChart;\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  CircularProgress,\r\n  Alert,\r\n  Button,\r\n  IconButton,\r\n  Tooltip,\r\n  Grid,\r\n} from '@mui/material';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport GetAppIcon from '@mui/icons-material/GetApp';\r\nimport axios from 'axios';\r\nimport { saveAs } from 'file-saver';\r\n\r\nimport CampaignOverview from './marketing/CampaignOverview';\r\nimport CampaignList from './marketing/CampaignList';\r\nimport CampaignMetricsChart from './marketing/CampaignMetricsChart';\r\nimport StatusDistributionChart from './marketing/StatusDistributionChart';\r\n\r\nfunction MarketingDashboard() {\r\n  const [campaigns, setCampaigns] = useState([]);\r\n  const [selectedCampaignId, setSelectedCampaignId] = useState(null);\r\n  const [campaignStats, setCampaignStats] = useState(null);\r\n  const [campaignMessages, setCampaignMessages] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [autoRefresh, setAutoRefresh] = useState(true);\r\n\r\n  // Cargar lista de campanas\r\n  const loadCampaigns = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get('/api/marketing/campaigns');\r\n      if (response.data.success) {\r\n        const campaignList = response.data.campaigns;\r\n        setCampaigns(campaignList);\r\n\r\n        // Si no hay campana seleccionada y hay campanas disponibles, seleccionar la primera activa\r\n        if (!selectedCampaignId && campaignList.length > 0) {\r\n          const activeCampaign = campaignList.find(c => c.active) || campaignList[0];\r\n          setSelectedCampaignId(activeCampaign.id);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error('Error loading campaigns:', err);\r\n      setError('Error al cargar las campanas');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [selectedCampaignId]);\r\n\r\n  // Cargar estadisticas de campana seleccionada\r\n  const loadCampaignStats = useCallback(async () => {\r\n    if (!selectedCampaignId) return;\r\n\r\n    try {\r\n      const [statsResponse, messagesResponse] = await Promise.all([\r\n        axios.get(`/api/marketing/campaign/${selectedCampaignId}/stats`),\r\n        axios.get(`/api/marketing/campaign/${selectedCampaignId}/messages`),\r\n      ]);\r\n\r\n      if (statsResponse.data.success) {\r\n        setCampaignStats(statsResponse.data);\r\n      }\r\n\r\n      if (messagesResponse.data.success) {\r\n        setCampaignMessages(messagesResponse.data.messages || []);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error loading campaign stats:', err);\r\n      setError('Error al cargar las estadisticas de la campana');\r\n    }\r\n  }, [selectedCampaignId]);\r\n\r\n  // Efecto inicial para cargar campanas\r\n  useEffect(() => {\r\n    loadCampaigns();\r\n  }, [loadCampaigns]);\r\n\r\n  // Efecto para cargar estadisticas cuando cambia la campana seleccionada\r\n  useEffect(() => {\r\n    if (selectedCampaignId) {\r\n      loadCampaignStats();\r\n    }\r\n  }, [selectedCampaignId, loadCampaignStats]);\r\n\r\n  // Auto-refresh cada 30 segundos\r\n  useEffect(() => {\r\n    if (!autoRefresh) return;\r\n\r\n    const interval = setInterval(() => {\r\n      loadCampaigns();\r\n      if (selectedCampaignId) {\r\n        loadCampaignStats();\r\n      }\r\n    }, 30000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [autoRefresh, selectedCampaignId, loadCampaigns, loadCampaignStats]);\r\n\r\n  // Exportar datos a JSON\r\n  const handleExportJSON = () => {\r\n    const data = {\r\n      campaign: campaigns.find(c => c.id === selectedCampaignId),\r\n      stats: campaignStats,\r\n      messages: campaignMessages,\r\n      exportedAt: new Date().toISOString(),\r\n    };\r\n\r\n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\r\n    saveAs(blob, `campana_${selectedCampaignId}_${Date.now()}.json`);\r\n  };\r\n\r\n  // Exportar datos a CSV\r\n  const handleExportCSV = () => {\r\n    if (campaignMessages.length === 0) return;\r\n\r\n    const headers = ['Message ID', 'Recipient', 'Status', 'Sent', 'Delivered', 'Read'];\r\n    const rows = campaignMessages.map(msg => [\r\n      msg.messageId,\r\n      msg.recipient,\r\n      msg.status,\r\n      msg.timestamps.sent ? new Date(msg.timestamps.sent).toISOString() : '',\r\n      msg.timestamps.delivered ? new Date(msg.timestamps.delivered).toISOString() : '',\r\n      msg.timestamps.read ? new Date(msg.timestamps.read).toISOString() : '',\r\n    ]);\r\n\r\n    const csvContent = [headers, ...rows].map(row => row.join(',')).join('\\n');\r\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n    saveAs(blob, `mensajes_${selectedCampaignId}_${Date.now()}.csv`);\r\n  };\r\n\r\n  // Refresh manual\r\n  const handleRefresh = () => {\r\n    setLoading(true);\r\n    loadCampaigns();\r\n    if (selectedCampaignId) {\r\n      loadCampaignStats();\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  if (loading && campaigns.length === 0) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: 400 }}>\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  if (error && campaigns.length === 0) {\r\n    return (\r\n      <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n        {error}\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      {/* Header con acciones */}\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\r\n        <Typography variant=\"h5\" component=\"h2\" sx={{ fontWeight: 600 }}>\r\n          Dashboard de Marketing\r\n        </Typography>\r\n        <Box sx={{ display: 'flex', gap: 1 }}>\r\n          <Tooltip title={autoRefresh ? 'Auto-refresh activado' : 'Auto-refresh desactivado'}>\r\n            <Button\r\n              variant={autoRefresh ? 'contained' : 'outlined'}\r\n              size=\"small\"\r\n              onClick={() => setAutoRefresh(!autoRefresh)}\r\n            >\r\n              Auto-refresh: {autoRefresh ? 'ON' : 'OFF'}\r\n            </Button>\r\n          </Tooltip>\r\n          <Tooltip title=\"Actualizar ahora\">\r\n            <IconButton onClick={handleRefresh} color=\"primary\">\r\n              <RefreshIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n          <Tooltip title=\"Exportar a JSON\">\r\n            <IconButton onClick={handleExportJSON} color=\"primary\" disabled={!selectedCampaignId}>\r\n              <GetAppIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n          <Tooltip title=\"Exportar a CSV\">\r\n            <Button\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              onClick={handleExportCSV}\r\n              disabled={!selectedCampaignId || campaignMessages.length === 0}\r\n              startIcon={<GetAppIcon />}\r\n            >\r\n              CSV\r\n            </Button>\r\n          </Tooltip>\r\n        </Box>\r\n      </Box>\r\n\r\n      <Grid container spacing={3}>\r\n        {/* Columna izquierda: Lista de campanas */}\r\n        <Grid item xs={12} md={4}>\r\n          <CampaignList\r\n            campaigns={campaigns}\r\n            selectedCampaignId={selectedCampaignId}\r\n            onSelectCampaign={setSelectedCampaignId}\r\n            loading={loading}\r\n          />\r\n        </Grid>\r\n\r\n        {/* Columna derecha: Estadisticas y graficos */}\r\n        <Grid item xs={12} md={8}>\r\n          {selectedCampaignId && campaignStats ? (\r\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>\r\n              {/* Overview cards */}\r\n              <CampaignOverview stats={campaignStats} />\r\n\r\n              {/* Graficos */}\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={12} lg={6}>\r\n                  <StatusDistributionChart stats={campaignStats} />\r\n                </Grid>\r\n                <Grid item xs={12} lg={6}>\r\n                  <CampaignMetricsChart messages={campaignMessages} />\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          ) : (\r\n            <Box sx={{ textAlign: 'center', py: 8 }}>\r\n              <Typography variant=\"h6\" color=\"text.secondary\">\r\n                Selecciona una campana para ver sus estadisticas\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default MarketingDashboard;\r\n"],"names":["MetricCard","_ref","title","value","percentage","icon","Icon","color","threshold","statusColor","getStatusColor","numValue","parseFloat","type","excellent","acceptable","_jsx","Card","sx","height","background","boxShadow","transition","transform","children","_jsxs","CardContent","Box","display","alignItems","mb","backgroundColor","concat","borderRadius","p","mr","fontSize","Typography","variant","component","flexGrow","fontWeight","gap","Chip","label","size","TrendingUpIcon","TrendingDownIcon","_ref2","stats","textAlign","py","totalSent","delivered","read","reactions","deliveryRate","readRate","engagementRate","metrics","toLocaleString","SendIcon","toFixed","DoneAllIcon","VisibilityIcon","FavoriteIcon","gridTemplateColumns","xs","sm","md","map","metric","index","_objectSpread","campaigns","selectedCampaignId","onSelectCampaign","loading","length","pb","Divider","List","campaign","React","ListItem","disablePadding","ListItemButton","selected","id","onClick","ListItemIcon","active","CheckCircleIcon","PauseCircleIcon","ListItemText","primary","name","secondary","mt","description","format","Date","created","locale","es","CampaignIcon","CustomTooltip","payload","border","entry","messages","gutterBottom","groupedData","reduce","acc","message","timestamp","timestamps","sent","hour","enviados","entregados","leidos","includes","status","chartData","Object","values","sort","a","b","localeCompare","width","ResponsiveContainer","LineChart","data","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","stroke","XAxis","dataKey","style","YAxis","Tooltip","content","Legend","wrapperStyle","iconType","Line","strokeWidth","dot","r","activeDot","COLORS","failed","renderLabel","byStatus","total","sum","count","entries","filter","_ref3","_","_ref4","PieChart","Pie","cx","cy","labelLine","outerRadius","fill","Cell","verticalAlign","setCampaigns","useState","setSelectedCampaignId","campaignStats","setCampaignStats","campaignMessages","setCampaignMessages","setLoading","error","setError","autoRefresh","setAutoRefresh","loadCampaigns","useCallback","async","response","axios","get","success","campaignList","activeCampaign","find","c","err","console","loadCampaignStats","statsResponse","messagesResponse","Promise","all","useEffect","interval","setInterval","clearInterval","justifyContent","minHeight","CircularProgress","Alert","severity","Button","IconButton","handleRefresh","RefreshIcon","handleExportJSON","exportedAt","toISOString","blob","Blob","JSON","stringify","saveAs","now","disabled","GetAppIcon","handleExportCSV","csvContent","msg","messageId","recipient","row","join","startIcon","Grid","container","spacing","item","CampaignList","flexDirection","CampaignOverview","lg","StatusDistributionChart","CampaignMetricsChart"],"sourceRoot":""}