// chatbot.js
require('dotenv').config(); // Carga las variables de entorno desde el archivo .env

const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');
const redis = require('redis');
const fs = require('fs');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const { BUSINESS_CONTEXT } = require('./business_data'); // Importa el contexto del negocio
const path = require('path');

// === SISTEMA DE MONITOREO ===
const MetricsCollector = require('./monitoring/metrics');
const HealthChecker = require('./monitoring/health-checker');
const MonitoringWebSocketServer = require('./monitoring/websocket-server');
const cron = require('node-cron');

// --- CONFIGURACI√ìN ---
// Lee las variables de entorno de forma segura. ¬°No dejes tokens en el c√≥digo!
const VERIFY_TOKEN = process.env.VERIFY_TOKEN;
const WHATSAPP_TOKEN = process.env.WHATSAPP_TOKEN;
const PHONE_NUMBER_ID = process.env.PHONE_NUMBER_ID;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const ADMIN_WHATSAPP_NUMBERS = process.env.ADMIN_WHATSAPP_NUMBERS; // Plural
const N8N_WEBHOOK_URL = process.env.N8N_WEBHOOK_URL;
const REDIS_URL = process.env.REDIS_URL;
const WHATSAPP_API_VERSION = process.env.WHATSAPP_API_VERSION || 'v18.0';
const MAINTENANCE_MODE_KEY = 'maintenance_mode_status'; // Clave para Redis

// Validamos que las variables de entorno cr√≠ticas est√©n definidas
if (!VERIFY_TOKEN || !WHATSAPP_TOKEN || !PHONE_NUMBER_ID || !GEMINI_API_KEY || !ADMIN_WHATSAPP_NUMBERS || !N8N_WEBHOOK_URL || !REDIS_URL) {
  console.error(
    'Error: Faltan variables de entorno cr√≠ticas. ' +
    'Aseg√∫rate de que VERIFY_TOKEN, WHATSAPP_TOKEN, PHONE_NUMBER_ID, GEMINI_API_KEY, ADMIN_WHATSAPP_NUMBERS, N8N_WEBHOOK_URL y REDIS_URL '
    +
    'est√©n en tu archivo .env'
  );
  process.exit(1); // Detiene la aplicaci√≥n si falta configuraci√≥n
}

const app = express();
app.use(bodyParser.json());

// Servir la aplicaci√≥n de React
app.use('/dashboard', express.static(path.join(__dirname, 'dashboard/build')));
// Servir archivos est√°ticos del dashboard de monitoreo
app.use('/css', express.static(path.join(__dirname, 'dashboard/css')));
app.use('/js', express.static(path.join(__dirname, 'dashboard/js')));

// === VARIABLES GLOBALES PARA MONITOREO ===
let metricsCollector = null;
let healthChecker = null;
let wsServer = null;



// --- CONEXI√ìN A REDIS ---
// Helper para pausas
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

const redisClient = redis.createClient({
  url: REDIS_URL
});

redisClient.on('error', err => console.error('Error en el cliente de Redis', err));
redisClient.on('connect', () => console.log('Conectado exitosamente a Redis.'));
redisClient.connect(); // <-- CR√çTICO: Es necesario para iniciar la conexi√≥n con Redis.

const PORT = process.env.PORT || 3000;

// === INICIO DEL BLOQUE PARA UPTIMEROBOT ===
// Endpoint ra√≠z para que los monitores de salud (como UptimeRobot) sepan que el bot est√° vivo.
app.get('/', (req, res) => {
  res.status(200).send('CapiBobbaBot est√° en l√≠nea y funcionando. ¬°Listo para recibir mensajes!');
});

// --- ENDPOINTS ---

// Endpoint para la verificaci√≥n del Webhook (solo se usa una vez por Meta)
app.get('/webhook', (req, res) => {
  console.log("GET /webhook - Verificando webhook...");

  const mode = req.query['hub.mode'];
  const token = req.query['hub.verify_token'];
  const challenge = req.query['hub.challenge'];

  // Valida que el modo y el token sean correctos
  if (mode && token) {
    if (mode === 'subscribe' && token === VERIFY_TOKEN) {
      console.log('WEBHOOK_VERIFIED');
      res.status(200).send(challenge);
    } else {
      // Si no coinciden, responde con '403 Forbidden'
      console.log('Verification failed. Tokens do not match.');
      res.sendStatus(403);
    }
  } else {
      res.sendStatus(400);
  }
});

// 5. MODIFICACI√ìN DEL ENDPOINT DE WEBHOOK EXISTENTE
// REEMPLAZA tu funci√≥n actual de manejo de webhook con esta versi√≥n mejorada:

app.post('/webhook', async (req, res) => {
    console.log('üì® Webhook recibido. Headers:', req.headers);
    console.log('üì¶ Cuerpo completo del webhook:', JSON.stringify(req.body, null, 2));

    const body = req.body;

    // Validar que lleg√≥ informaci√≥n
    if (!body || Object.keys(body).length === 0) {
        console.log('‚ùå Webhook vac√≠o recibido');
        return res.status(400).send('Webhook body is empty');
    }

    try {
        // Verificar si es un mensaje de WhatsApp
        if (body.object === 'whatsapp_business_account' && body.entry && body.entry[0] && body.entry[0].changes) {
            const changes = body.entry[0].changes[0];
            
            if (changes.field === 'messages' && changes.value && changes.value.messages) {
                const messages = changes.value.messages;
                
                for (const message of messages) {
                    console.log('üì± Procesando mensaje de WhatsApp:', JSON.stringify(message, null, 2));
                    
                    // Enviar mensaje a n8n con el formato esperado por el workflow
                    const n8nPayload = {
                        rawMessage: message,
                        from: message.from,
                        timestamp: message.timestamp,
                        type: message.type
                    };

                    // Agregar contenido espec√≠fico seg√∫n el tipo de mensaje
                    if (message.type === 'text' && message.text) {
                        n8nPayload.text = message.text.body;
                    } else if (message.type === 'interactive' && message.interactive) {
                        n8nPayload.interactive = message.interactive;
                    }

                    // Enviar a n8n primero
                    await sendToN8n(message);
                    
                    // Verificar modo de mantenimiento
                    const maintenanceMode = await redisClient.get(MAINTENANCE_MODE_KEY);
                    if (maintenanceMode === 'true' && !checkIfAdminForWorkflow(message.from)) {
                        await sendTextMessage(
                            message.from,
                            'üîß Estamos en mantenimiento. El servicio estar√° disponible pronto. Gracias por tu paciencia.'
                        );
                        continue;
                    }

                    // Procesar el mensaje normalmente
                    await processIncomingMessage(message);
                }
            }
        }
        
        res.status(200).send('OK');
    } catch (error) {
        console.error('‚ùå Error procesando webhook:', error);
        res.status(500).send('Error interno del servidor');
    }
});


// --- API PARA EL DASHBOARD ---

// Endpoint para obtener el estado del modo de mantenimiento
app.get('/api/maintenance', async (req, res) => {
  try {
    const isMaintenanceMode = await redisClient.get(MAINTENANCE_MODE_KEY) === 'true';
    res.json({ maintenanceMode: isMaintenanceMode });
  } catch (error) {
    console.error('Error al obtener el estado de mantenimiento:', error);
    res.status(500).json({ error: 'Error del servidor' });
  }
});

// Endpoint para actualizar el estado del modo de mantenimiento
app.post('/api/maintenance', async (req, res) => {
  const { maintenanceMode } = req.body;
  if (typeof maintenanceMode !== 'boolean') {
    return res.status(400).json({ error: 'El estado de mantenimiento debe ser un booleano' });
  }

  try {
    if (maintenanceMode) {
      await redisClient.set(MAINTENANCE_MODE_KEY, 'true');
      await notifyAdmin(`‚ö†Ô∏è Un administrador ha ACTIVADO el modo "Fuera de Servicio" desde el dashboard.`);
    } else {
      await redisClient.del(MAINTENANCE_MODE_KEY);
      await notifyAdmin(`üü¢ Un administrador ha DESACTIVADO el modo "Fuera de Servicio" desde el dashboard.`);
    }
    res.json({ success: true, maintenanceMode });
  } catch (error) {
    console.error('Error al actualizar el estado de mantenimiento:', error);
    res.status(500).json({ error: 'Error del servidor' });
  }
});

// Endpoint para obtener los datos del negocio
app.get('/api/business-data', (req, res) => {
  fs.readFile(path.join(__dirname, 'business_data.json'), 'utf8', (err, data) => {
    if (err) {
      console.error('Error al leer business_data.json:', err);
      return res.status(500).json({ error: 'Error al leer los datos del negocio.' });
    }
    try {
      res.json(JSON.parse(data));
    } catch (parseError) {
      console.error('Error al parsear business_data.json:', parseError);
      res.status(500).json({ error: 'El formato del archivo de datos es inv√°lido.' });
    }
  });
});

// Endpoint para actualizar los datos del negocio
app.post('/api/business-data', (req, res) => {
    const newBusinessData = req.body;
    const jsonContent = JSON.stringify(newBusinessData, null, 4); // 4 espacios para indentaci√≥n

    fs.writeFile(path.join(__dirname, 'business_data.json'), jsonContent, 'utf8', async (err) => {
        if (err) {
            console.error('Error al escribir en business_data.json:', err);
            return res.status(500).json({ error: 'No se pudo guardar la configuraci√≥n.' });
        }
        console.log('business_data.json actualizado correctamente.');
        await notifyAdmin('‚úÖ La informaci√≥n del negocio (men√∫, promos, etc.) ha sido actualizada desde el dashboard.');
        res.json({ success: true });
    });
});

// --- L√ìGICA DEL BOT ---

// --- GESTI√ìN DE ESTADO CON REDIS ---
// Las siguientes funciones reemplazan el `Map` en memoria para guardar y recuperar el estado de la conversaci√≥n de forma persistente.

/**
 * Obtiene el estado de la conversaci√≥n de un usuario desde Redis.
 * @param {string} from El n√∫mero de WhatsApp del usuario.
 * @returns {Promise<object|null>} El objeto de estado o null si no existe.
 */
async function getUserState(from) {
  const stateJSON = await redisClient.get(from);
  return stateJSON ? JSON.parse(stateJSON) : null;
}

/**
 * Guarda el estado de la conversaci√≥n de un usuario en Redis.
 * El estado expira en 24 horas para limpiar conversaciones inactivas.
 * @param {string} from El n√∫mero de WhatsApp del usuario.
 * @param {object} state El objeto de estado a guardar.
 */
async function setUserState(from, state) {
  // Guardamos el estado como un string JSON y le ponemos una expiraci√≥n de 24 horas (86400 segundos).
  await redisClient.set(from, JSON.stringify(state), { EX: 86400 });
}

/**
 * Elimina el estado de la conversaci√≥n de un usuario de Redis.
 * @param {string} from El n√∫mero de WhatsApp del usuario.
 */
async function deleteUserState(from) {
  await redisClient.del(from);
}

/**
 * Verifica si un n√∫mero de tel√©fono corresponde a un administrador.
 * @param {string} from El n√∫mero de WhatsApp a verificar.
 * @returns {boolean} True si el n√∫mero es de un administrador, false en caso contrario.
 */
function isAdmin(from) {
    if (!ADMIN_WHATSAPP_NUMBERS) {
        return false;
    }
    const adminNumbers = ADMIN_WHATSAPP_NUMBERS.split(',').map(num => num.trim());
    return adminNumbers.includes(from);
}
/**
 * Formatea un n√∫mero de WhatsApp para mostrarlo de forma m√°s legible.
 * Ej: Convierte "5217712416450" a "7712416450".
 * @param {string} fullNumber El n√∫mero completo con c√≥digo de pa√≠s.
 * @returns {string} El n√∫mero formateado.
 */
function formatDisplayNumber(fullNumber) {
  if (typeof fullNumber !== 'string') return fullNumber;

  if (fullNumber.startsWith('521')) {
    return fullNumber.substring(3);
  }
  // Para n√∫meros que no tienen el '1' extra despu√©s del c√≥digo de pa√≠s.
  if (fullNumber.startsWith('52')) {
    return fullNumber.substring(2);
  }
  return fullNumber; // Devuelve el n√∫mero original si no coincide con los patrones de M√©xico.
}

/**
 * Env√≠a datos del mensaje recibido a un webhook de n8n.
 * @param {object} message El objeto de mensaje de la API de WhatsApp.
 * @param {object} [extraData={}] Datos adicionales para incluir en el payload.
 */
async function sendToN8n(message, extraData = {}) {
  // 1. Construcci√≥n del payload base y fusi√≥n con datos extra.
  const payload = {
    from: message.from,
    type: message.type,
    timestamp: message.timestamp, // El mensaje ya trae un timestamp UNIX
    rawMessage: message,
    ...extraData // Fusiona cualquier dato extra como 'address'.
  };

  // 2. A√±adir detalles espec√≠ficos del mensaje de forma segura.
  switch (message.type) {
    case 'text':
      payload.text = message.text?.body;
      break;
    case 'interactive':
      if (message.interactive?.type === 'button_reply') {
        payload.interactive = {
          type: 'button_reply',
          id: message.interactive.button_reply?.id,
          title: message.interactive.button_reply?.title
        };
      }
      // Se puede a√±adir 'list_reply' aqu√≠ en el futuro.
      break;
    case 'image':
      payload.interactive = {
        id: message.image?.id,
        mime_type: message.image?.mime_type
      };
      break;
    case 'audio':
      payload.audio = {
        id: message.audio?.id,
        mime_type: message.audio?.mime_type
      };
      break;
    case 'document':
      payload.document = {
        id: message.document?.id,
        mime_type: message.document?.mime_type,
        filename: message.document?.filename
      };
      break;
    case 'location':
      payload.location = {
        latitude: message.location?.latitude,
        longitude: message.location?.longitude
      };
      break;
    // A√±adir m√°s casos seg√∫n sea necesario.
  }

  // 3. Env√≠o as√≠ncrono con manejo de errores mejorado.
  try {
    console.log('Enviando payload a n8n:', JSON.stringify(payload, null, 2));
    const response = await axios.post(N8N_WEBHOOK_URL, payload, { timeout: 5000 }); // Timeout de 5 segundos
    console.log('Respuesta de n8n recibida:', response.data);
  } catch (error) {
    if (error.response) {
      // El servidor respondi√≥ con un c√≥digo de estado fuera del rango 2xx
      console.error('Error enviando a n8n (el servidor respondi√≥ con un error):', { status: error.response.status, data: error.response.data });
    } else if (error.request) {
      // La petici√≥n se hizo pero no se recibi√≥ respuesta
      console.error('Error enviando a n8n (sin respuesta): Aseg√∫rate de que n8n est√© corriendo y el webhook est√© activo y sea de tipo POST.');
    } else if (error.code === 'ECONNABORTED') {
      console.error('Error enviando a n8n: La petici√≥n tard√≥ demasiado (timeout).');
    } else {
      // Algo pas√≥ al configurar la petici√≥n que lanz√≥ un Error
      console.error('Error enviando a n8n (error de configuraci√≥n de Axios):', error.message);
    }
  }
}

// 1. FUNCI√ìN MEJORADA PARA REGISTRAR RESPUESTAS DEL BOT
/**
 * Registra la respuesta del bot en el webhook de n8n con el formato esperado por el workflow.
 * @param {string} to El n√∫mero de WhatsApp del destinatario.
 * @param {object} messagePayload El payload del mensaje que se env√≠a.
 */
function registerBotResponseToN8n(to, messagePayload) {
    const payload = {
        source: 'bot',
        recipient: to,
        timestamp: Math.floor(Date.now() / 1000),
        messagePayload: messagePayload
    };

    console.log('Registrando respuesta del bot en n8n:', JSON.stringify(payload, null, 2));

    axios.post(N8N_WEBHOOK_URL, payload)
        .then(response => {
            console.log('Respuesta del bot registrada en n8n:', response.data);
        })
        .catch(error => {
            console.error('Error registrando respuesta del bot en n8n:', error.message);
        });
}

// 2. FUNCI√ìN MEJORADA PARA ENV√çO DE PEDIDOS COMPLETADOS
/**
 * Env√≠a los detalles de un pedido completado a n8n con el formato exacto esperado.
 * @param {string} from El n√∫mero del cliente.
 * @param {object} orderDetails Los detalles del pedido.
 */
function sendOrderCompletionToN8nEnhanced(from, orderDetails) {
    const payload = {
        from: from,
        type: 'order_completed',
        timestamp: Math.floor(Date.now() / 1000),
        order: {
            summary: orderDetails.summary || '',
            total: orderDetails.total || 0,
            fullText: orderDetails.fullText || ''
        },
        delivery: {
            address: orderDetails.address || '',
            accessCodeRequired: orderDetails.accessCodeRequired || false
        },
        payment: {
            method: orderDetails.paymentMethod || '',
            // A√±ade detalles espec√≠ficos del pago seg√∫n el m√©todo
            ...(orderDetails.paymentMethod === 'Efectivo' && { 
                cashDenomination: orderDetails.cashDenomination 
            }),
            ...(orderDetails.paymentMethod === 'Transferencia' && { 
                proofImageId: orderDetails.proofImageId 
            })
        }
    };

    console.log('Enviando pedido completo a n8n (enhanced):', JSON.stringify(payload, null, 2));

    axios.post(N8N_WEBHOOK_URL, payload)
        .then(response => {
            console.log('Respuesta de n8n (pedido completo enhanced):', response.data);
        })
        .catch(error => {
            console.error('Error enviando pedido completo a n8n (enhanced):', error.message);
        });
}

// 3. FUNCI√ìN PARA ENV√çO DE ACTUALIZACIONES DE DIRECCI√ìN
/**
 * Env√≠a una actualizaci√≥n de direcci√≥n al workflow de n8n.
 * @param {string} from El n√∫mero del cliente.
 * @param {string} address La nueva direcci√≥n.
 */
function sendAddressUpdateToN8n(from, address) {
    const payload = {
        from: from,
        type: 'address_update',
        timestamp: Math.floor(Date.now() / 1000),
        address: address
    };

    console.log('Enviando actualizaci√≥n de direcci√≥n a n8n:', JSON.stringify(payload, null, 2));

    axios.post(N8N_WEBHOOK_URL, payload)
        .then(response => {
            console.log('Actualizaci√≥n de direcci√≥n enviada a n8n:', response.data);
        })
        .catch(error => {
            console.error('Error enviando actualizaci√≥n de direcci√≥n a n8n:', error.message);
        });
}

// 4. FUNCI√ìN AUXILIAR PARA VERIFICAR ADMINISTRADORES (debe coincidir con el workflow)
/**
 * Funci√≥n auxiliar que debe coincidir con checkIfAdmin del workflow
 * @param {string} phoneNumber N√∫mero de tel√©fono a verificar
 * @returns {boolean} True si es admin
 */
function checkIfAdminForWorkflow(phoneNumber) {
    if (!phoneNumber || !ADMIN_WHATSAPP_NUMBERS) {
        return false;
    }
    const adminNumbers = ADMIN_WHATSAPP_NUMBERS.split(',').map(num => num.trim());
    return adminNumbers.includes(phoneNumber);
}


// 6. FUNCI√ìN MODIFICADA PARA PROCESAR MENSAJES ENTRANTES
/**
 * Procesa mensajes entrantes con integraci√≥n completa al workflow
 */
async function processIncomingMessage(message) {
    const from = message.from;
    const messageType = message.type;
    
    console.log(`üîÑ Procesando mensaje de ${from}, tipo: ${messageType}`);

    try {
        // Obtener estado del usuario desde Redis
        let userState = await getUserState(from);

        switch (messageType) {
            case 'text':
                const text = message.text.body;
                
                // Verificar si es un pedido completado (del men√∫ web)
                if (text.includes('Total del pedido:') || text.includes('Total a pagar:')) {
                    console.log('üõí Pedido completado detectado');
                    await handleOrderCompletion(from, text, userState);
                } else {
                    // Procesar como mensaje de texto normal
                    await handleTextMessage(from, text, userState);
                }
                break;

            case 'interactive':
                await handleInteractiveMessage(from, message.interactive, userState);
                break;

            case 'image':
                await handleImageMessage(from, message.image, userState);
                break;

            case 'location':
                await handleLocationMessage(from, message.location, userState);
                break;

            default:
                console.log(`‚ö†Ô∏è Tipo de mensaje no manejado: ${messageType}`);
                break;
        }
    } catch (error) {
        console.error('‚ùå Error procesando mensaje:', error);
        await sendTextMessage(
            from,
            'Lo siento, hubo un error procesando tu mensaje. Por favor intenta de nuevo.'
        );
    }
}

// 7. FUNCI√ìN PARA MANEJAR FINALIZACI√ìN DE PEDIDOS
/**
 * Maneja la finalizaci√≥n de pedidos desde el men√∫ web
 */
async function handleOrderCompletion(from, orderText, userState) {
    console.log('üçπ Procesando finalizaci√≥n de pedido para:', from);

    // Actualizar estado del usuario
    userState.orderText = orderText;
    userState.currentStep = 'awaiting_address';
    userState.orderTimestamp = Math.floor(Date.now() / 1000);
    
    await setUserState(from, userState);

    // Extraer informaci√≥n del pedido
    const orderInfo = extractOrderInfo(orderText);
    
    // Enviar a n8n como pedido completado
    await sendOrderCompletionToN8nEnhanced(from, {
        summary: orderInfo.summary,
        total: orderInfo.total,
        fullText: orderText
    });

    // Solicitar direcci√≥n de entrega
    const addressMessage = {
        type: 'interactive',
        interactive: {
            type: 'button',
            body: {
                text: `¬°Perfecto! Tu pedido ha sido recibido üéâ

${orderInfo.summary}

*Total: $${orderInfo.total}*

Para continuar, necesito tu direcci√≥n de entrega:`
            },
            action: {
                buttons: [
                    {
                        type: 'reply',
                        reply: {
                            id: 'send_location',
                            title: 'üìç Enviar ubicaci√≥n'
                        }
                    },
                    {
                        type: 'reply',
                        reply: {
                            id: 'type_address',
                            title: '‚úèÔ∏è Escribir direcci√≥n'
                        }
                    }
                ]
            }
        }
    };

    await sendMessage(from, addressMessage);
    
    // Registrar respuesta del bot en n8n
    registerBotResponseToN8n(from, addressMessage);
}

// 8. FUNCI√ìN AUXILIAR PARA EXTRAER INFORMACI√ìN DEL PEDIDO
/**
 * Maneja los mensajes de texto procesando comandos, estados del usuario y consultas libres.
 * @param {string} from El n√∫mero del remitente.
 * @param {string} text El texto del mensaje.
 * @param {object} userState El estado actual del usuario.
 */
async function handleTextMessage(from, text, userState) {
    console.log(`üí¨ Procesando mensaje de texto de ${from}: "${text}"`);
    
    // 1. Verificar si es un administrador
    if (isAdmin(from)) {
        await handleAdminMessage({ from, type: 'text', text: { body: text } });
        return;
    }

    // 2. Manejar estados espec√≠ficos del usuario
    if (userState && userState.step) {
        switch (userState.step) {
            case 'awaiting_address':
                await handleAddressResponse(from, text);
                return;
            
            case 'awaiting_cash_denomination':
                await handleCashDenominationResponse(from, text);
                return;
            
            case 'in_conversation_with_admin':
                // El usuario est√° en chat con un admin, reenviar el mensaje
                const adminNumber = userState.admin;
                await sendTextMessage(adminNumber, `üë§ Cliente ${formatDisplayNumber(from)}: ${text}`);
                return;
                
            default:
                // Estado no reconocido, continuar con el procesamiento normal
                break;
        }
    }

    // 3. Normalizar el texto para b√∫squeda de comandos
    const normalizedText = text.toLowerCase().trim();
    
    // 4. Buscar manejador de comandos
    const commandHandler = findCommandHandler(normalizedText);
    if (commandHandler) {
        await commandHandler(from, normalizedText);
        return;
    }
    
    // 5. Si no se encontr√≥ comando, usar Gemini para responder
    await handleFreeformQuery(from, text);
}

/**
 * Maneja los mensajes interactivos (botones, listas).
 * @param {string} from El n√∫mero del remitente.
 * @param {object} interactive El objeto interactive del mensaje.
 * @param {object} userState El estado actual del usuario.
 */
async function handleInteractiveMessage(from, interactive, userState) {
    console.log(`üéØ Procesando mensaje interactivo de ${from}:`, interactive);
    
    if (interactive.type === 'button_reply') {
        const buttonId = interactive.button_reply?.id;
        const buttonTitle = interactive.button_reply?.title;
        
        console.log(`Bot√≥n presionado: ${buttonId} - ${buttonTitle}`);
        
        // Verificar si hay un manejador espec√≠fico para este bot√≥n
        if (buttonCommandHandlers[buttonId]) {
            await buttonCommandHandlers[buttonId](from);
            return;
        }
        
        // Manejar botones espec√≠ficos del flujo de pedidos
        if (userState && userState.step) {
            switch (userState.step) {
                case 'awaiting_access_code_info':
                    if (buttonId === 'access_code_yes' || buttonId === 'access_code_no') {
                        await handleAccessCodeResponse(from, buttonId);
                        return;
                    }
                    break;
                    
                case 'awaiting_payment_method':
                    if (buttonId === 'payment_cash' || buttonId === 'payment_transfer') {
                        await handlePaymentMethodResponse(from, buttonId);
                        return;
                    }
                    break;
                    
                case 'awaiting_address':
                    if (buttonId === 'send_location') {
                        await sendTextMessage(from, 'üìç Por favor, env√≠a tu ubicaci√≥n usando el bot√≥n de WhatsApp para compartir ubicaci√≥n.');
                        return;
                    } else if (buttonId === 'type_address') {
                        await sendTextMessage(from, '‚úèÔ∏è Por favor, escribe tu direcci√≥n completa (calle, n√∫mero, colonia, referencias).');
                        return;
                    }
                    break;
            }
        }
        
        // Si no se maneja espec√≠ficamente, responder de forma general
        await sendTextMessage(from, 'He recibido tu selecci√≥n. ¬øEn qu√© m√°s puedo ayudarte?');
    }
}

/**
 * Maneja los mensajes de imagen.
 * @param {string} from El n√∫mero del remitente.
 * @param {object} image El objeto image del mensaje.
 * @param {object} userState El estado actual del usuario.
 */
async function handleImageMessage(from, image, userState) {
    console.log(`üì∑ Procesando imagen de ${from}:`, image);
    
    // Verificar si el usuario est√° esperando un comprobante de pago
    if (userState && userState.step === 'awaiting_payment_proof') {
        await handlePaymentProofImage(from, image);
        return;
    }
    
    // Para otras im√°genes, responder de forma general
    await sendTextMessage(from, 'He recibido tu imagen. Si es un comprobante de pago, por favor aseg√∫rate de que est√© en el proceso de pedido correcto.');
}

/**
 * Maneja los mensajes de ubicaci√≥n.
 * @param {string} from El n√∫mero del remitente.
 * @param {object} location El objeto location del mensaje.
 * @param {object} userState El estado actual del usuario.
 */
async function handleLocationMessage(from, location, userState) {
    console.log(`üìç Procesando ubicaci√≥n de ${from}:`, location);
    
    // Verificar si el usuario est√° en el proceso de proporcionar su direcci√≥n
    if (userState && userState.step === 'awaiting_address') {
        const address = `Ubicaci√≥n: Lat ${location.latitude}, Lng ${location.longitude}`;
        await handleAddressResponse(from, address);
        return;
    }
    
    // Para ubicaciones fuera del flujo de pedidos
    await sendTextMessage(from, 'He recibido tu ubicaci√≥n. Si necesitas hacer un pedido, por favor usa el men√∫ principal.');
}

/**
 * Extrae informaci√≥n relevante del texto del pedido
 */
function extractOrderInfo(orderText) {
    // Buscar el total
    const totalMatch = orderText.match(/Total (?:del pedido|a pagar):\s*\$?(\d+(?:\.\d{2})?)/i);
    const total = totalMatch ? parseFloat(totalMatch[1]) : 0;

    // Extraer resumen de items (l√≠neas entre el inicio y el total)
    const lines = orderText.split('\n').map(line => line.trim()).filter(Boolean);
    const totalLineIndex = lines.findIndex(line => 
        line.toLowerCase().includes('total del pedido:') || 
        line.toLowerCase().includes('total a pagar:')
    );

    let summary = '';
    if (totalLineIndex > 0) {
        // Buscar l√≠neas que parecen items
        const itemLines = lines.slice(1, totalLineIndex).filter(line => 
            line.includes('x ') || line.includes('$') || /\d+. *\w+/ .test(line)
        );
        summary = itemLines.join('\n');
    }

    return {
        total: total,
        summary: summary || 'Pedido personalizado',
        fullText: orderText
    };
}

/**
 * Maneja los mensajes provenientes de un n√∫mero de administrador.
 * @param {object} message El objeto de mensaje de la API de WhatsApp.
 */
async function handleAdminMessage(message) {
    const from = message.from;
    const messageBody = message.type === 'text' ? message.text.body.trim() : '';
    const lowerCaseMessage = messageBody.toLowerCase();

    // --- Comandos de Modo Fuera de Servicio ---
    if (lowerCaseMessage === 'activar fuera de servicio') {
        await redisClient.set(MAINTENANCE_MODE_KEY, 'true');
        await sendTextMessage(from, '‚úÖ Modo "Fuera de Servicio" ACTIVADO. El bot informar√° a los clientes que no hay servicio.');
        await notifyAdmin(`‚ö†Ô∏è El administrador ${formatDisplayNumber(from)} ha ACTIVADO el modo "Fuera de Servicio".`);
        return;
    }

    if (lowerCaseMessage === 'desactivar fuera de servicio') {
        await redisClient.del(MAINTENANCE_MODE_KEY);
        await sendTextMessage(from, '‚úÖ Modo "Fuera de Servicio" DESACTIVADO. El bot vuelve a operar normalmente.');
        await notifyAdmin(`üü¢ El administrador ${formatDisplayNumber(from)} ha DESACTIVADO el modo "Fuera de Servicio".`);
        return;
    }

    const adminState = await getUserState(from);

    // --- Comandos de Chat Directo ---

    // Comando para terminar una conversaci√≥n
    if (lowerCaseMessage === 'terminar chat' || lowerCaseMessage === 'salir') {
        if (adminState && adminState.mode === 'chatting') {
            const clientNumber = adminState.targetUser;
            // Limpiamos los estados de ambos
            await deleteUserState(from);
            await deleteUserState(clientNumber);

            await sendTextMessage(from, `‚úÖ Chat con ${formatDisplayNumber(clientNumber)} finalizado. Has vuelto al modo normal.`);
            await sendTextMessage(clientNumber, `La conversaci√≥n con nuestro agente ha terminado. Si necesitas algo m√°s, escribe "hola" para ver el men√∫. üëã`);
        } else {
            await sendTextMessage(from, `No est√°s en un chat activo. Para iniciar uno, usa el comando: "hablar con <numero>"`);
        }
        return;
    }

    // Comando para iniciar una conversaci√≥n
    if (lowerCaseMessage.startsWith('hablar con ')) {
        const targetUser = lowerCaseMessage.replace('hablar con ', '').trim();
        // Validaci√≥n simple para asegurar que es un n√∫mero
        if (/^\d+$/.test(targetUser)) {
            // Establecemos el estado para el admin y para el cliente
            await setUserState(from, { mode: 'chatting', targetUser: targetUser });
            await setUserState(targetUser, { mode: 'in_conversation_with_admin', admin: from });

            await sendTextMessage(from, `üìû Has iniciado un chat directo con ${formatDisplayNumber(targetUser)}. Todo lo que escribas ahora se le enviar√° directamente.

Para terminar, escribe "terminar chat".`);
            await sendTextMessage(targetUser, `üßë‚Äç Un agente se ha unido a la conversaci√≥n para ayudarte personalmente.`);
        } else {
            await sendTextMessage(from, `El n√∫mero proporcionado no es v√°lido. Aseg√∫rate de que sea solo el n√∫mero de WhatsApp (ej. 521771...).`);
        }
        return;
    }

    // Si el admin ya est√° en modo chat, reenviamos su mensaje al cliente
    if (adminState && adminState.mode === 'chatting') {
        const clientNumber = adminState.targetUser;
        if (message.type === 'text') {
            await sendTextMessage(clientNumber, `üßë‚Äç Agente: ${message.text.body}`);
        } else {
            // En el futuro se podr√≠a implementar el reenv√≠o de im√°genes, audios, etc.
            await sendTextMessage(from, "Por ahora, solo puedo reenviar mensajes de texto en el chat directo.");
        }
        return;
    }

    // --- Otros Comandos de Admin ---

    console.log(`Mensaje recibido del administrador ${from}: "${messageBody}"`);

    switch (lowerCaseMessage) {
        case '/test_webhook':
            const testPayload = {
                from: from,
                type: 'test_message',
                timestamp: Math.floor(Date.now() / 1000),
                test: true,
                message: 'Mensaje de prueba del webhook'
            };
            
            await axios.post(N8N_WEBHOOK_URL, testPayload);
            await sendTextMessage(from, '‚úÖ Mensaje de prueba enviado al webhook de n8n');
            break;

        case '/test_order':
            // Crear el pedido de prueba
            const testOrderText = `üçπ Tu pedido de CapiBobba

1x Frapp√© de Chocolate - $45.00
2x Bubble Tea de Taro - $90.00
1x Smoothie de Mango - $38.00

Total del pedido: $173.00

¬°Gracias por tu preferencia!`;

            // ENVIAR EL PEDIDO COMO order_completed a n8n
            const orderCompletedPayload = {
                from: from,
                type: 'order_completed',
                timestamp: Math.floor(Date.now() / 1000),
                order: {
                    summary: "1x Frapp√© de Chocolate - $45.00\n2x Bubble Tea de Taro - $90.00\n1x Smoothie de Mango - $38.00",
                    total: 173.00,
                    fullText: testOrderText
                },
                delivery: {
                    address: "Calle de Prueba #123, Colonia Test, Pachuca",
                    accessCodeRequired: false
                },
                payment: {
                    method: "Efectivo",
                    cashDenomination: "200"
                }
            };

            try {
                // Enviar a n8n como pedido completado
                await axios.post(N8N_WEBHOOK_URL, orderCompletedPayload);
                console.log('‚úÖ Pedido de prueba enviado a n8n:', orderCompletedPayload);
                
                await sendTextMessage(from, '‚úÖ Pedido de prueba enviado al workflow de n8n. Deber√≠as recibir notificaciones en Telegram.');
            } catch (error) {
                console.error('‚ùå Error enviando pedido de prueba:', error.message);
                await sendTextMessage(from, `‚ùå Error enviando pedido de prueba: ${error.message}`);
            }
            break;

        case '/test_order_user':
            // Simular mensaje de usuario con pedido
            const userOrderPayload = {
                from: from,
                type: 'text',
                timestamp: Math.floor(Date.now() / 1000).toString(),
                rawMessage: {
                    from: from,
                    id: `test_msg_${Date.now()}`,
                    timestamp: Math.floor(Date.now() / 1000).toString(),
                    text: {
                        body: `¬°Hola! Me gustar√≠a hacer un pedido con los siguientes productos:

1. Blueberry x 1 ($75.00 c/u) - Subtotal: $75.00

Total del pedido: $75.00

¬°Espero su confirmaci√≥n! Gracias. üòä`
                    },
                    type: 'text'
                },
                text: `¬°Hola! Me gustar√≠a hacer un pedido con los siguientes productos:

1. Blueberry x 1 ($75.00 c/u) - Subtotal: $75.00

Total del pedido: $75.00

¬°Espero su confirmaci√≥n! Gracias. üòä`
            };

            try {
                await axios.post(N8N_WEBHOOK_URL, userOrderPayload);
                console.log('‚úÖ Mensaje de pedido de usuario simulado enviado a n8n');
                
                await sendTextMessage(from, '‚úÖ Mensaje de pedido de usuario simulado enviado. Deber√≠as ver el flujo completo en Telegram.');
            } catch (error) {
                console.error('‚ùå Error enviando mensaje simulado:', error.message);
                await sendTextMessage(from, `‚ùå Error: ${error.message}`);
            }
            break;

        case '/debug_payload':
            // Mostrar c√≥mo se est√° enviando actualmente
            const debugPayload = {
                from: from,
                type: 'text',
                timestamp: Math.floor(Date.now() / 1000).toString(),
                rawMessage: {
                    from: from,
                    text: { body: '/test_order' },
                    type: 'text'
                },
                text: '/test_order'
            };
            
            await sendTextMessage(from, `üîç Payload actual que se env√≠a:\n\`\`\`json\n${JSON.stringify(debugPayload, null, 2)}\n\`\`\``);
            break;

        case '/webhook_status':
            try {
                const response = await axios.get(N8N_WEBHOOK_URL.replace('/webhook/', '/health'), { timeout: 5000 });
                await sendTextMessage(from, '‚úÖ Webhook de n8n est√° funcionando correctamente');
            } catch (error) {
                await sendTextMessage(from, `‚ùå Error conectando con webhook: ${error.message}`);
            }
            break;

        case 'hola admin':
            await sendTextMessage(from, `ü§ñ Saludos, administrador. Estoy a tu disposici√≥n. Puedes usar "hablar con <numero>" para chatear con un cliente.`);
            break;
    }
}

/**
 * Maneja la respuesta num√©rica de una encuesta de satisfacci√≥n.
 * @param {string} from El n√∫mero del remitente.
 * @param {number} rating La calificaci√≥n dada por el usuario (0-5).
 */
async function handleSurveyResponse(from, rating) {
  console.log(`Respuesta de encuesta recibida de ${from}: Calificaci√≥n ${rating}`);
  logSurveyResponseToFile({ from: from, rating: rating }); // Log the survey response

  let responseText;

  // Personalizamos el mensaje de agradecimiento seg√∫n la calificaci√≥n.
  if (rating <= 2) {
    responseText = `Lamentamos mucho que tu experiencia no haya sido la mejor. Agradecemos tus comentarios y los tomaremos en cuenta para mejorar. Un agente podr√≠a contactarte para entender mejor qu√© pas√≥.`;
    // Notificamos a un admin sobre la mala calificaci√≥n para un seguimiento.
    notifyAdmin(`‚ö†Ô∏è ¬°Alerta de Calificaci√≥n Baja! ‚ö†Ô∏è\n\nEl cliente ${formatDisplayNumber(from)} ha calificado el servicio con un: *${rating}*.\n\nSer√≠a bueno contactarlo para entender qu√© podemos mejorar.`);
  } else if (rating >= 4) {
    responseText = `¬°Nos alegra mucho que hayas tenido una buena experiencia! Gracias por tu calificaci√≥n. ¬°Esperamos verte pronto! üéâ`;
  } else { // Para calificaciones de 3
    responseText = `¬°Muchas gracias por tus comentarios! Tu opini√≥n es muy importante para nosotros y nos ayuda a mejorar. üòä`;
  }

  await sendTextMessage(from, responseText);

  // Opcional: Si usaras un estado como 'awaiting_survey', aqu√≠ lo limpiar√≠as.
  // await deleteUserState(from);
}
// --- MANEJADORES DE COMANDOS ---

/**
 * Comprueba si un texto es un saludo com√∫n.
 * @param {string} text El texto a comprobar en min√∫sculas.
 * @returns {boolean}
 */
function isGreeting(text) {
  const greetings = ['hola', 'buenas', 'buenos dias', 'buen dia', 'hey', 'que tal', 'buenas tardes','buenas noches'];
  return greetings.some(greeting => text.startsWith(greeting));
}

/**
 * Define los manejadores para los botones interactivos.
 * La clave es el ID del bot√≥n y el valor es la funci√≥n manejadora.
 */
const buttonCommandHandlers = {
  'ver_menu': handleShowMenu,
  'ver_promociones': handleShowPromotions,
  'contactar_agente': handleContactAgent
};

/**
 * Define la lista de comandos de texto, su prioridad y c√≥mo detectarlos.
 * El array se procesa en orden, por lo que los comandos m√°s espec√≠ficos deben ir primero.
 */
const commandHandlers = [
  // Prioridad 1: Pedido completo desde el men√∫ web. Es el m√°s espec√≠fico.
  {
    name: 'Handle Web Menu Order',
    match: (text) => text.includes('total del pedido:') || text.includes('total a pagar:'),
    handler: handleNewOrderFromMenu
  },
  // Prioridad 2: Intenci√≥n de hacer un pedido.
  {
    name: 'Initiate Order',
    keywords: ['pedido', 'ordenar', 'quisiera pedir', 'me gustar√≠a pedir', 'me gustar√≠a hacer el siguiente pedido', 'quiero pedir', 'me gustar√≠a ordenar'],
    handler: handleInitiateOrder
  },
  // Prioridad 3: Saludos comunes.
  {
    name: 'Greeting',
    match: isGreeting,
    handler: sendMainMenu
  },
  // NUEVO: Prioridad 3.5: Preguntas sobre el estado del servicio.
  {
    name: 'Check Service Status',
    keywords: ['servicio', 'abierto', 'trabajando', 'atienden', 'atendiendo', 'laborando'],
    handler: handleServiceStatusCheck
  },
  // Prioridad 4: Comandos generales por palabra clave.
  { name: 'Show Menu', keywords: ['menu'], handler: handleShowMenu },
  { name: 'Show Promotions', keywords: ['promo'], handler: handleShowPromotions },
  { name: 'Show Hours', keywords: ['hora', 'horario'], handler: handleShowHours },
  { name: 'Show Location', keywords: ['ubicacion', 'donde estan', 'domicilio'], handler: handleShowLocation },
  { name: 'Help', keywords: ['ayuda'], handler: sendMainMenu } // 'ayuda' ahora usa el mismo sistema
];

/**
 * Busca y devuelve el manejador de comandos apropiado para un mensaje de texto.
 * Itera a trav√©s de la lista `commandHandlers` y devuelve el primer manejador que coincida.
 * @param {string} text El mensaje del usuario en min√∫sculas y sin espacios extra.
 * @returns {Function|null} La funci√≥n manejadora o null si no se encuentra.
 */
function findCommandHandler(text) {
  for (const command of commandHandlers) {
    // Estrategia 1: Funci√≥n de match personalizada (la m√°s flexible)
    if (command.match && command.match(text)) {
      return command.handler;
    }
    // Estrategia 2: Coincidencia por palabras clave
    if (command.keywords && command.keywords.some(keyword => text.includes(keyword))) {
      return command.handler;
    }
  }
  // Si ninguna de las palabras clave coincide, no devolvemos nada para que lo maneje Gemini.
  return null;
}

// --- ACCIONES DEL BOT (Las respuestas de tu negocio) ---

/**
 * Env√≠a el men√∫ principal con botones.
 * @param {string} to N√∫mero del destinatario.
 */
async function sendMainMenu(to, text) {
  // Verificamos el modo "fuera de servicio"
  const isMaintenanceMode = await redisClient.get(MAINTENANCE_MODE_KEY) === 'true';
  let bodyText = '¬°Hola! Soy CapiBot, el asistente virtual de CapiBobba. ¬øC√≥mo puedo ayudarte hoy?';
  let adminNotification = `üîî ¬°Atenci√≥n! El cliente ${formatDisplayNumber(to)} ha iniciado una conversaci√≥n y est√° viendo el men√∫ principal.`;

  if (isMaintenanceMode) {
    bodyText = `‚ö†Ô∏è *AVISO: En este momento no estamos tomando pedidos.*

¬°Hola! Soy CapiBot. Aunque no hay servicio de pedidos, puedo darte informaci√≥n sobre nuestro men√∫ o promociones. ¬øEn qu√© te ayudo?`;
    adminNotification += '\n(Modo "Fuera de Servicio" est√° ACTIVO)';
  }

  // Notificamos al administrador
  notifyAdmin(adminNotification);

  const payload = {
    type: 'interactive',
    interactive: {
      type: 'button',
      header: { type: 'text', text: 'üßãCapiBobbaüßã' },
      body: { text: bodyText },
      footer: { text: 'Selecciona una opci√≥n' },
      action: {
        buttons: [
          { type: 'reply', reply: { id: 'ver_menu', title: 'Ver Men√∫ üìú' } },
          { type: 'reply', reply: { id: 'ver_promociones', title: 'Promociones ‚ú®' } },
          { type: 'reply', reply: { id: 'contactar_agente', title: 'Hablar con alguien üßë‚Äç' } }
        ]
      }
    }
  };
  await sendMessage(to, payload);
}

/**
 * Maneja la solicitud para ver el men√∫.
 * @param {string} to N√∫mero del destinatario.
 */
async function handleShowMenu(to, text) {
  await sendTextMessage(to, `¬°Claro! Aqu√≠ est√° nuestro delicioso men√∫: https://feyomx.github.io/menucapibobba/`);
}

/**
 * Maneja la solicitud para ver las promociones.
 * @param {string} to N√∫mero del destinatario.
 */
async function handleShowPromotions(to, text) {
  const promoText = `¬°Nuestras promos de hoy! ‚ú®\n\n- *Combo dia Lluvioso:* 2 bebidas calientes del mismo sabor x $110.\n- *Combo Amigos:* 2 Frappe base agua del mismo sabor por $130.`;
  await sendTextMessage(to, promoText);
}

/**
 * Maneja la solicitud de horario.
 * @param {string} to N√∫mero del destinatario.
 */
async function handleShowHours(to, text) {
  const hoursText = `Nuestro horario de atenci√≥n es:\nLunes a Viernes: 6:00 PM - 10:00 PM\nS√°bados y Domingos: 12:00 PM - 10:00 PM`;
  await sendTextMessage(to, hoursText);
}

/**
 * Maneja la solicitud de ubicaci√≥n.
 * @param {string} to N√∫mero del destinatario.
 */
async function handleShowLocation(to, text) {
  const locationText = `Tenemos servicio a domicilio GRATIS en los fraccionamientos aleda√±os a Vi√±edos!`;
  await sendTextMessage(to, locationText);
}

/**
 * Maneja la solicitud para contactar a un agente.
 * @param {string} to N√∫mero del destinatario.
 */
async function handleContactAgent(to, text) {
  await sendTextMessage(to, 'Entendido. Un agente se pondr√° en contacto contigo en breve.');
  await notifyAdmin(`üîî ¬°Atenci√≥n! El cliente ${formatDisplayNumber(to)} solicita hablar con un agente.`);
}

/**
 * NUEVO: Verifica si hay servicio y responde adecuadamente.
 * Si el modo "fuera de servicio" est√° activo, lo informa.
 * Si no, delega la pregunta a Gemini para una respuesta m√°s natural.
 * @param {string} to N√∫mero del destinatario.
 * @param {string} text El texto de la pregunta del usuario.
 */
async function handleServiceStatusCheck(to, text) {
  const isMaintenanceMode = await redisClient.get(MAINTENANCE_MODE_KEY) === 'true';

  if (isMaintenanceMode) {
    // Si el modo est√° activo, siempre informa que no hay servicio.
    await sendTextMessage(to, 'Hola. En este momento no estamos tomando pedidos. ¬°Agradecemos tu comprensi√≥n y esperamos verte pronto! üëã');
  } else {
    // Si el servicio est√° activo, la pregunta es general ("¬øest√°n abiertos?").
    // Dejamos que Gemini la responda usando el contexto del negocio (horarios).
    await handleFreeformQuery(to, text);
  }
}
/**
 * Maneja la intenci√≥n de iniciar un pedido.
 * Si el pedido ya est√° en el mensaje, lo procesa.
 * Si no, gu√≠a al usuario para que lo genere.
 * @param {string} to N√∫mero del destinatario.
 * @param {string} text El texto completo del mensaje del usuario.
 */
async function handleInitiateOrder(to, text) {
  // NUEVO: Verificaci√≥n del modo "fuera de servicio"
  const isMaintenanceMode = await redisClient.get(MAINTENANCE_MODE_KEY) === 'true';
  if (isMaintenanceMode) {
    await sendTextMessage(to, '¬°Hola! En este momento no estamos tomando pedidos, pero con gusto puedo darte informaci√≥n sobre nuestro men√∫ o promociones. ¬øEn qu√© te puedo ayudar? üòä');
    return;
  }

  // Comprueba si el texto del mensaje ya contiene un pedido formateado con el texto correcto.
  if (text.toLowerCase().includes('total del pedido:')) {
    await handleNewOrderFromMenu(to, text);
  } else {
    // Si solo es la intenci√≥n, gu√≠a al usuario.
    const guideText = `¬°Genial! Para tomar tu pedido de la forma m√°s r√°pida y sin errores, por favor, cr√©alo en nuestro men√∫ interactivo y cuando termines, copia y pega el resumen de tu orden aqu√≠.

Aqu√≠ tienes el enlace: https://feyomx.github.io/menucapibobba/`;
    await sendTextMessage(to, guideText);
  }
}

/**
 * Extrae solo los art√≠culos de un texto de pedido completo.
 * @param {string} orderText El texto completo del pedido.
 * @returns {string} Una cadena con solo los art√≠culos del pedido, uno por l√≠nea.
 */
function extractOrderItems(orderText) {
  const lines = orderText.split('\n');
  const totalLineIndex = lines.findIndex(line => line.toLowerCase().startsWith('total del pedido:'));

  // Si no se encuentra la l√≠nea de total, es probable que el formato no sea el esperado.
  // Usamos un fallback, pero lo ideal es que el formato siempre sea consistente.
  if (totalLineIndex === -1) {
    return orderText.split('\n').slice(1, -2).join('\n');
  }

  // Buscamos el inicio de los art√≠culos. Asumimos que es despu√©s de la primera l√≠nea vac√≠a.
  const firstEmptyLineIndex = lines.findIndex(line => line.trim() === '');
  const startIndex = firstEmptyLineIndex > -1 ? firstEmptyLineIndex + 1 : 1;

  // Filtramos las l√≠neas entre el inicio y la l√≠nea de total para quedarnos solo con los art√≠culos.
  const items = lines.slice(startIndex, totalLineIndex).filter(line => line.trim() !== '');
  
  return items.join('\n');
}

/**
 * Construye un mensaje de notificaci√≥n estandarizado para los administradores.
 * @param {string} title El t√≠tulo de la notificaci√≥n (ej. "üéâ ¬°Nuevo pedido en Efectivo!").
 * @param {object} userState El estado completo del usuario.
 * @param {string} from El n√∫mero de WhatsApp del cliente.
 * @param {object} [extraDetails={}] Un objeto con detalles adicionales a incluir (ej. { 'Paga con': '$500' }).
 * @returns {string} El mensaje de notificaci√≥n formateado.
 */
function buildAdminNotification(title, userState, from, extraDetails = {}) {
  // 1. Desestructuraci√≥n segura con valores por defecto para evitar errores.
  const { address = 'No especificada', orderText = '', accessCodeInfo } = userState || {};

  // 2. Extracci√≥n de datos.
  const orderSummary = extractOrderItems(orderText);
  // Regex mejorada: busca el total, permitiendo opcionalmente un espacio y decimales.
  const totalMatch = orderText.match(/Total del pedido:\s*(\$?\d+(\.\d{1,2})?)/i);
  const total = totalMatch ? totalMatch[1] : 'N/A';
  
  // 3. Mensajes claros con emojis consistentes.
  const accessCodeMessage = accessCodeInfo === 'access_code_yes'
    ? 'üîê S√≠, se necesita c√≥digo'
    : 'üîì No, acceso libre';

  // 4. Construcci√≥n del mensaje usando un array para mayor legibilidad y mantenimiento.
  const notificationParts = [
    title,
    '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ',
    `üßç *Cliente:* ${formatDisplayNumber(from)}`,
    `üè† *Direcci√≥n:* ${address}`,
    `üîë *Acceso:* ${accessCodeMessage}`,
    '', // Espacio antes del pedido
    'üßæ *Pedido:*',
    orderSummary,
    '', // Espacio despu√©s del pedido
    `üí∞ *Total:* ${total}`
  ];

  // A√±adir detalles extra si se proporcionan
  Object.entries(extraDetails).forEach(([key, value]) => {
    notificationParts.push(`üìå *${key}:* ${value}`);
  });

  return notificationParts.join('\n');
}
/**
 * Maneja la recepci√≥n de un nuevo pedido desde el men√∫ web.
 * @param {string} to N√∫mero del destinatario.
 * @param {string} orderText El texto completo del pedido del cliente.
 */
async function handleNewOrderFromMenu(to, orderText) {
  // NUEVO: Verificaci√≥n del modo "fuera de servicio"
  const isMaintenanceMode = await redisClient.get(MAINTENANCE_MODE_KEY) === 'true';
  if (isMaintenanceMode) {
    await sendTextMessage(to, '¬°Hola! En este momento no estamos tomando pedidos, pero con gusto puedo darte informaci√≥n sobre nuestro men√∫ o promociones. ¬øEn qu√© te puedo ayudar? üòä');
    return;
  }

  const totalMatch = orderText.match(/Total del pedido: $(\d+\.\d{2})/i);
  const total = totalMatch ? totalMatch[1] : null;

  // Notificar a los administradores que se ha iniciado un nuevo pedido.
  const orderSummary = extractOrderItems(orderText);
  const initialAdminNotification = `üîî ¬°Nuevo pedido iniciado!\n\n*Cliente:* ${formatDisplayNumber(to)}\n\n*Pedido:*
${orderSummary}\n\n*Total:* ${total ? '$' + total : 'No especificado'}\n\n*Nota:* Esperando direcci√≥n y m√©todo de pago.`;
  await notifyAdmin(initialAdminNotification);

  let confirmationText = `¬°Gracias por tu pedido! ‚ú®\n\nHemos recibido tu orden y ya est√° en proceso de confirmaci√≥n.`;

  if (total) {
    confirmationText += `\n\nConfirmamos un total de *$${total}*. En un momento te enviaremos los detalles para el pago.`;
  }

  // 1. Env√≠a el mensaje de confirmaci√≥n inicial.
  await sendTextMessage(to, confirmationText);

  // 2. Env√≠a la pregunta de seguimiento para la direcci√≥n.
  const addressRequestText = `Para continuar, por favor, ind√≠canos tu direcci√≥n completa (calle, n√∫mero, colonia y alguna referencia). üè†`;
  await sendTextMessage(to, addressRequestText);

  // 3. Pone al usuario en el estado de "esperando direcci√≥n".
  await setUserState(to, { step: 'awaiting_address', orderText: orderText });
}

/**
 * Maneja la respuesta del usuario cuando se le pide la direcci√≥n.
 * @param {string} from El n√∫mero del remitente.
 * @param {string} address El texto de la direcci√≥n proporcionada.
 */
async function handleAddressResponse(from, address) {
  console.log(`Direcci√≥n recibida de ${from}: ${address}`);

  // Mejora: Si el usuario vuelve a enviar el pedido en lugar de la direcci√≥n, se lo volvemos a pedir.
  if (address.toLowerCase().includes('total del pedido:')) {
    await sendTextMessage(from, 'Parece que me enviaste el pedido de nuevo. ¬°No te preocupes! Ya lo tengo registrado. üëç\n\nAhora solo necesito que me escribas tu direcci√≥n completa para continuar.');
    return; // Detenemos la ejecuci√≥n para esperar la direcci√≥n correcta.
  }

  // Pregunta si se necesita c√≥digo de acceso con botones.
  const payload = {
    type: 'interactive',
    interactive: {
      type: 'button',
      body: { text: '¬°Perfecto! Gracias por tu direcci√≥n.\n\n¬øTu domicilio est√° en una privada y se necesita c√≥digo de acceso para entrar?' },
      action: {
        buttons: [
          { type: 'reply', reply: { id: 'access_code_yes', title: 'S√≠, se necesita' } },
          { type: 'reply', reply: { id: 'access_code_no', title: 'No, no se necesita' } }
        ]
      }
    }
  };
  await sendMessage(from, payload);

  // Actualiza el estado del usuario preservando el estado anterior (como orderText).
  const currentState = await getUserState(from) || {};
  await setUserState(from, { ...currentState, step: 'awaiting_access_code_info', address: address });

  // Notifica a n8n que la direcci√≥n fue actualizada.
  // Se crea un payload personalizado para este evento espec√≠fico,
  // ya que no corresponde a un mensaje directo del usuario.
  sendToN8n({ from: from, type: 'address_update', timestamp: Math.floor(Date.now() / 1000) }, { address });
  console.log(`Direcci√≥n enviada a n8n: ${address}`);
}

/**
 * Maneja la respuesta del usuario sobre el c√≥digo de acceso.
 * @param {string} from El n√∫mero del remitente.
 * @param {string} buttonId El ID del bot√≥n presionado ('access_code_yes' o 'access_code_no').
 */
async function handleAccessCodeResponse(from, buttonId) {
  const userState = await getUserState(from);
  
  // Guardamos la informaci√≥n del c√≥digo de acceso en el estado
  userState.accessCodeInfo = buttonId;

  // Ahora, en lugar de finalizar, preguntamos por el m√©todo de pago
  const payload = {
    type: 'interactive',
    interactive: {
      type: 'button',
      body: { text: '¬°Excelente! Por √∫ltimo, ¬øc√≥mo prefieres realizar tu pago?' },
      action: {
        buttons: [
          { type: 'reply', reply: { id: 'payment_cash', title: 'Efectivo üíµ' } },
          { type: 'reply', reply: { id: 'payment_transfer', title: 'Transferencia üí≥' } }
        ]
      }
    }
  };
  await sendMessage(from, payload);

  // Actualiza el estado del usuario para esperar la respuesta del m√©todo de pago.
  await setUserState(from, { ...userState, step: 'awaiting_payment_method' });
}

/**
 * Maneja la respuesta del usuario sobre el m√©todo de pago.
 * @param {string} from El n√∫mero del remitente.
 * @param {string} buttonId El ID del bot√≥n presionado ('payment_cash' o 'payment_transfer').
 */
async function handlePaymentMethodResponse(from, buttonId) {
  const userState = await getUserState(from);
  if (!userState) return; // Chequeo de seguridad

  if (buttonId === 'payment_transfer') {
    const bankDetails = `Para transferencias, puedes usar la siguiente cuenta:\n- Banco: MERCADO PAGO W\n- N√∫mero de Cuenta: 722969010305501833\n- A nombre de: Maria Elena Martinez Flores\n\nPor favor, env√≠a tu comprobante de pago a este mismo chat para confirmar tu pedido.`;
    await sendTextMessage(from, bankDetails);
    await sendTextMessage(from, 'Por favor, env√≠a una imagen de tu comprobante de pago a este mismo chat para confirmar tu pedido.');

    // Notificar al administrador
    const adminNotification = buildAdminNotification(
      '‚è≥ Pedido por Transferencia en espera',
      userState,
      from,
      { 'Nota': 'Esperando comprobante de pago.' }
    );
    await notifyAdmin(adminNotification);

    // Actualizamos el estado para esperar la imagen del comprobante
    await setUserState(from, { ...userState, step: 'awaiting_payment_proof', paymentMethod: 'Transferencia' });
  } else { // 'payment_cash'
    await sendTextMessage(from, 'Has elegido pagar en efectivo. ¬øCon qu√© billete pagar√°s? (ej. $200, $500) para que podamos llevar tu cambio exacto.');
    // Guardamos el m√©todo de pago en el estado
    await setUserState(from, { ...userState, step: 'awaiting_cash_denomination', paymentMethod: 'Efectivo' });
  }
}

/**
 * Maneja la respuesta del usuario sobre la denominaci√≥n del billete.
 * @param {string} from El n√∫mero del remitente.
 * @param {string} denomination El texto con la denominaci√≥n del billete.
 */
async function handleCashDenominationResponse(from, denomination) {
  // Mejora: Validar la entrada del usuario para asegurar que sea un n√∫mero.
  const sanitizedDenomination = denomination.trim().replace('$', '');
  if (isNaN(sanitizedDenomination) || parseFloat(sanitizedDenomination) <= 0) {
    await sendTextMessage(from, 'Por favor, ingresa un monto v√°lido para el pago en efectivo (ej. 200, 500).');
    return; // No continuamos si la entrada no es v√°lida.
  }

  const userState = await getUserState(from);
  const address = userState.address;
  let finalMessage = `¬°Pedido completo y confirmado! üõµ\n\nTu orden ser√° enviada a:\n*${address}*.\n\n`;

  if (userState.accessCodeInfo === 'access_code_yes') {
    finalMessage += `Un agente te contactar√° para el c√≥digo de acceso cuando el repartidor est√© en camino.\n\n`;
  } else {
    finalMessage += `Hemos registrado que no se necesita c√≥digo de acceso.`;
  }
  
  finalMessage += `\nLlevaremos cambio para tu pago de *${denomination}*.\n\n¬°Gracias por tu preferencia!`;

  await sendTextMessage(from, finalMessage);

  // Notificar al administrador
  const adminNotification = buildAdminNotification(
    'üéâ ¬°Nuevo pedido en Efectivo!',
    userState,
    from,
    { 'Paga con': denomination }
  );
  await notifyAdmin(adminNotification);

  // Guardamos la denominaci√≥n y enviamos el pedido completo a n8n
  const finalState = { ...userState, cashDenomination: sanitizedDenomination };
  sendOrderCompletionToN8n(from, finalState);
  logOrderToFile(finalState); // Log the completed order

  console.log(`Pedido finalizado para ${from}. Direcci√≥n: ${address}. Pago: Efectivo (${sanitizedDenomination}).`);
  await deleteUserState(from);
}

/**
 * Maneja la recepci√≥n de una imagen como comprobante de pago.
 * @param {string} from El n√∫mero del remitente.
 * @param {object} imageObject El objeto de imagen del mensaje, que contiene el ID.
 */
async function handlePaymentProofImage(from, imageObject) {
  const userState = await getUserState(from); // <-- CORRECCI√ìN: Usar la funci√≥n async de Redis.
  if (!userState) return;

  console.log(`Recibido comprobante de pago (imagen) de ${from}`);
  
  // 1. Agradecer al cliente y confirmar el pedido
  await sendTextMessage(from, '¬°Gracias! Hemos recibido tu comprobante. Tu pedido ha sido confirmado y se preparar√° en breve. üõµ');

  // 2. Preparar la notificaci√≥n para los administradores
  const adminCaption = buildAdminNotification(
    '‚úÖ Comprobante Recibido',
    userState,
    from
  );

  // 3. Construir el payload para reenviar la imagen con el caption
  const imagePayload = {
    type: 'image',
    image: {
      id: imageObject.id, // Usamos el ID de la imagen recibida para reenviarla
      caption: adminCaption
    }
  };

  // 4. Enviar a todos los administradores
  const adminNumbers = ADMIN_WHATSAPP_NUMBERS.split(',').map(num => num.trim());
  for (const number of adminNumbers) {
    if (number) {
      await sendMessage(number, imagePayload);
    }
  }

  // Guardamos el ID de la imagen y enviamos el pedido completo a n8n
  const finalState = { ...userState, proofImageId: imageObject.id };
  sendOrderCompletionToN8n(from, finalState);
  logOrderToFile(finalState); // Log the completed order

  console.log(`Pedido finalizado y comprobante reenviado para ${from}.`);
  
  // 5. Limpiar el estado del usuario
  await deleteUserState(from); // <-- CORRECCI√ìN: Usar la funci√≥n async de Redis.
}
/**
 * Maneja preguntas de formato libre usando la API de Gemini.
 * @param {string} to N√∫mero del destinatario.
 * @param {string} userQuery La pregunta del usuario.
 */
async function handleFreeformQuery(to, userQuery) {
  try {
    // Inicializa el modelo de IA Generativa 
    const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" });

    // ¬°Importante! Aqu√≠ le das contexto al bot para que sepa c√≥mo comportarse.
    const prompt = `
    Eres "Capi", un asistente virtual experto y amigable de la bubble tea shop "CapiBoba".
    Tu √öNICA fuente de informaci√≥n es el siguiente contexto del negocio. No debes inventar productos, precios o promociones que no est√©n en esta lista.
    Si te preguntan por una bebida, recomienda √∫nicamente las que est√°n en el men√∫.

    --- CONTEXTO DEL NEGOCIO ---
    ${BUSINESS_CONTEXT}
    --- FIN DEL CONTEXTO ---

    Bas√°ndote ESTRICTAMENTE en la informaci√≥n del contexto, responde la siguiente pregunta del cliente de forma breve y servicial.
    Si la pregunta no se puede responder con la informaci√≥n proporcionada, responde amablemente que no tienes esa informaci√≥n y sugiere que pregunten por el men√∫ o las promociones.

    Pregunta del cliente: "${userQuery}"`;

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const geminiText = response.text();

    sendTextMessage(to, geminiText);
  } catch (error) {
    console.error('Error al contactar la API de Gemini:', error);
    // En caso de error con Gemini, env√≠a una respuesta por defecto.
    defaultHandler(to);
  }
}

/**
 * Maneja los mensajes no reconocidos.
 * @param {string} to N√∫mero del destinatario.
 */
async function defaultHandler(to) {
  await sendTextMessage(to, `No entend√≠ tu mensaje. Escribe "hola" o "ayuda" para ver las opciones disponibles.`);
}

/**
 * Env√≠a un mensaje de texto simple.
 * @param {string} to El n√∫mero de tel√©fono del destinatario.
 * @param {string} text El texto a enviar.
 */
async function sendTextMessage(to, text) {
  const payload = { type: 'text', text: { body: text } };
  await sendMessage(to, payload);
}

/**
 * Env√≠a una notificaci√≥n a todos los n√∫meros de WhatsApp de los administradores.
 * @param {string} text El mensaje de notificaci√≥n.
 */
async function notifyAdmin(text) {
  if (!ADMIN_WHATSAPP_NUMBERS) {
    console.log('No se han configurado n√∫meros de administrador para notificaciones.');
    return;
  }

  // Separa la cadena de n√∫meros en un array, elimina espacios y filtra vac√≠os.
  const adminNumbers = ADMIN_WHATSAPP_NUMBERS.split(',').map(num => num.trim()).filter(Boolean);

  if (adminNumbers.length === 0) {
    return;
  }

  console.log(`Enviando notificaci√≥n a los administradores: ${adminNumbers.join(', ')}`);

  // Crea una promesa para cada env√≠o de mensaje
  const promises = adminNumbers.map(number => sendTextMessage(number, text));

  // Espera a que todas las notificaciones se env√≠en en paralelo para mayor eficiencia
  await Promise.all(promises);
}

/**
 * Env√≠a el indicador de "escribiendo..." al usuario para mejorar la UX.
 * Esta es una acci√≥n de "disparar y olvidar", no bloquea el flujo principal.
 * @param {string} to El n√∫mero de tel√©fono del destinatario.
 */
async function sendTypingOn(to) {
  const url = `https://graph.facebook.com/${WHATSAPP_API_VERSION}/${PHONE_NUMBER_ID}/messages`;
  const data = {
    messaging_product: 'whatsapp',
    to: to,
    action: 'typing_on',
  };
  const headers = {
    'Authorization': `Bearer ${WHATSAPP_TOKEN}`,
    'Content-Type': 'application/json',
  };

  try {
    // No usamos await en la llamada a esta funci√≥n, pero la funci√≥n es async por axios.
    // No logueamos el √©xito para no saturar la consola.
    await axios.post(url, data, { headers });
  } catch (error) {
    // Es una funci√≥n de UX, si falla no es cr√≠tico. No logueamos el error para evitar ruido.
    // console.error('Error al enviar el indicador de typing_on:', error.response ? error.response.data : error.message);
  }
}


/**
 * Env√≠a un mensaje a trav√©s de la API de WhatsApp.
 * @param {string} to El n√∫mero de tel√©fono del destinatario.
 * @param {object} payload El objeto de mensaje a enviar (puede ser texto, interactivo, etc.).
 */
async function sendMessage(to, payload) {
  logMessageToFile({ type: 'outgoing', to: to, payload: payload }); // Log outgoing message
  // NUEVO: Registramos la respuesta del bot en n8n antes de enviarla.
  // Es una acci√≥n de "disparar y olvidar" para no retrasar la respuesta al usuario.
  // Esto nos permite tener un log de todas las comunicaciones salientes.
  registerBotResponseToN8n(to, payload);

  const url = `https://graph.facebook.com/${WHATSAPP_API_VERSION}/${PHONE_NUMBER_ID}/messages`;
  const data = {
    messaging_product: 'whatsapp',
    to: to,
    ...payload, // El payload contiene el tipo de mensaje y su contenido
  };
  const headers = {
    'Authorization': `Bearer ${WHATSAPP_TOKEN}`,
    'Content-Type': 'application/json',
  };

  try {
    console.log(`Enviando mensaje a ${to}:`, JSON.stringify(payload, null, 2));
    await axios.post(url, data, { headers });
    console.log('Mensaje enviado exitosamente.');
  } catch (error) {
    console.error('Error al enviar el mensaje:', error.response ? error.response.data : error.message);
  }
}


// --- Funciones de Logging ---

/**
 * Registra una entrada de log en un archivo .jsonl.
 * @param {string} fileName El nombre del archivo (ej. 'message_log.jsonl').
 * @param {object} logEntry El objeto a registrar.
 */
function logToFile(fileName, logEntry) {
  const logFilePath = path.join(__dirname, fileName);
  const timestampedEntry = { timestamp: new Date().toISOString(), ...logEntry };
  fs.appendFile(logFilePath, JSON.stringify(timestampedEntry) + '\n', (err) => {
    if (err) {
      console.error(`Error al escribir en el archivo de log ${fileName}:`, err);
    }
  });
}

// Funciones espec√≠ficas de log que usan el logger gen√©rico
const logMessageToFile = (logEntry) => logToFile('message_log.jsonl', logEntry);
const logOrderToFile = (orderData) => logToFile('order_log.jsonl', orderData);
const logSurveyResponseToFile = (surveyData) => logToFile('survey_log.jsonl', surveyData);

/**
 * Lee un archivo de log en formato JSONL y env√≠a el contenido como respuesta JSON.
 * @param {string} logFileName El nombre del archivo de log (ej. 'message_log.jsonl').
 * @param {object} res El objeto de respuesta de Express.
 * @param {string} errorContext Un string para el mensaje de error (ej. 'mensajes').
 */
function sendJsonlLogResponse(logFileName, res, errorContext) {
  const logFilePath = path.join(__dirname, logFileName);
  fs.readFile(logFilePath, 'utf8', (err, data) => {
    if (err) {
      if (err.code === 'ENOENT') {
        return res.json([]); // Si el archivo no existe, devuelve un array vac√≠o.
      }
      console.error(`Error al leer el archivo de log de ${errorContext}:`, err);
      return res.status(500).json({ error: `Error al leer el log de ${errorContext}.` });
    }
    const items = data.split('\n').filter(Boolean).map(line => {
      try {
        return JSON.parse(line);
      } catch (parseError) {
        console.error(`Error al parsear l√≠nea del log de ${errorContext}:`, parseError);
        return null; // Ignora l√≠neas mal formadas
      }
    }).filter(Boolean); // Filtra los nulos
    res.json(items);
  });
}

// Endpoint para obtener el log de mensajes
app.get('/api/message-log', (req, res) => {
  sendJsonlLogResponse('message_log.jsonl', res, 'mensajes');
});

// Endpoint para obtener el log de pedidos
app.get('/api/orders', (req, res) => {
  sendJsonlLogResponse('order_log.jsonl', res, 'pedidos');
});

// Endpoint para obtener el log de encuestas
app.get('/api/surveys', (req, res) => {
  sendJsonlLogResponse('survey_log.jsonl', res, 'encuestas');
});


/**
 * Endpoint para enviar mensajes a un usuario de WhatsApp desde el dashboard.
 * Requiere 'to' (n√∫mero de WhatsApp) y 'text' (contenido del mensaje) en el body.
 */
app.post('/api/send-message', async (req, res) => {
  const { to, text } = req.body;

  if (!to || !text) {
    return res.status(400).json({ error: "Faltan par√°metros: 'to' y 'text' son requeridos." });
  }

  try {
    await sendTextMessage(to, text);
    res.json({ success: true, message: 'Mensaje enviado exitosamente.' });
  } catch (error) {
    console.error('Error al enviar mensaje desde el dashboard:', error);
    res.status(500).json({ error: 'Error al enviar el mensaje.' });
  }
});

// Endpoint para obtener todos los estados de Redis
app.get('/api/redis-states', async (req, res) => {
  try {
    // Obtener todas las claves de Redis. CUIDADO: KEYS * puede ser lento en bases de datos grandes.
    const keys = await redisClient.keys('*');
    const states = [];

    for (const key of keys) {
      // Excluir la clave de modo de mantenimiento y otras claves internas si es necesario
      if (key === MAINTENANCE_MODE_KEY) continue;
      
      const value = await redisClient.get(key);
      try {
        states.push({ key: key, state: JSON.parse(value) });
      } catch (parseError) {
        // Si no es JSON, lo devolvemos como texto plano
        states.push({ key: key, state: value });
      }
    }
    res.json(states);
  } catch (error) {
    console.error('Error al obtener estados de Redis:', error);
    res.status(500).json({ error: 'Error al obtener estados de Redis.' });
  }
});

// Endpoint para eliminar un estado de Redis por clave
app.delete('/api/redis-states/:key', async (req, res) => {
  const { key } = req.params;
  try {
    const result = await redisClient.del(key);
    if (result === 1) {
      res.json({ success: true, message: `Estado para la clave ${key} eliminado.` });
    } else {
      res.status(404).json({ error: `Clave ${key} no encontrada.` });
    }
  } catch (error) {
    console.error(`Error al eliminar estado para la clave ${key}:`, error);
    res.status(500).json({ error: 'Error al eliminar estado de Redis.' });
  }
});

// === SISTEMA DE MONITOREO ===

// Inicializaci√≥n del sistema de monitoreo
async function initializeMonitoring() {
    try {
        console.log('üöÄ Inicializando sistema de monitoreo...');

        // Inicializar MetricsCollector
        metricsCollector = new MetricsCollector(redisClient, {
            webhookUrl: N8N_WEBHOOK_URL,
            whatsappToken: WHATSAPP_TOKEN,
            phoneNumberId: PHONE_NUMBER_ID,
            whatsappApiVersion: WHATSAPP_API_VERSION,
            maintenanceModeKey: MAINTENANCE_MODE_KEY
        });

        // Inicializar HealthChecker
        healthChecker = new HealthChecker(metricsCollector, {
            checkInterval: parseInt(process.env.HEALTH_CHECK_INTERVAL) || 30000,
            cpuThreshold: parseInt(process.env.CPU_THRESHOLD) || 80,
            memoryThreshold: parseInt(process.env.MEMORY_THRESHOLD) || 85,
            responseTimeThreshold: parseInt(process.env.RESPONSE_TIME_THRESHOLD) || 5000,
            errorRateThreshold: parseFloat(process.env.ERROR_RATE_THRESHOLD) || 0.05,
            telegramToken: process.env.TELEGRAM_BOT_TOKEN,
            telegramChatId: process.env.TELEGRAM_CHAT_ID
        });

        // Inicializar WebSocket Server
        const wsPort = parseInt(process.env.WEBSOCKET_PORT) || 3001;
        wsServer = new MonitoringWebSocketServer(metricsCollector, healthChecker, wsPort);

        console.log('‚úÖ Sistema de monitoreo inicializado exitosamente');

        // Programar tareas de mantenimiento
        scheduleMaintenanceTasks();

    } catch (error) {
        console.error('‚ùå Error inicializando sistema de monitoreo:', error);
    }
}

// Tareas de mantenimiento programadas
function scheduleMaintenanceTasks() {
    // Backup diario a las 3 AM
    cron.schedule(process.env.BACKUP_SCHEDULE || '0 3 * * *', async () => {
        try {
            console.log('üîÑ Ejecutando backup diario...');
            await createSystemBackup();
        } catch (error) {
            console.error('‚ùå Error en backup diario:', error);
            if (metricsCollector) {
                metricsCollector.recordError('backup');
            }
        }
    });

    // Limpieza semanal los domingos a las 2 AM
    cron.schedule(process.env.CLEANUP_SCHEDULE || '0 2 * * 0', async () => {
        try {
            console.log('üßπ Ejecutando limpieza semanal...');
            await cleanupOldData();
        } catch (error) {
            console.error('‚ùå Error en limpieza:', error);
        }
    });
}

// Crear backup del sistema
async function createSystemBackup() {
    try {
        const backupData = {
            timestamp: new Date().toISOString(),
            version: require('./package.json').version,

            // Estados de usuarios activos
            userStates: await getAllUserStates(),

            // Configuraci√≥n del bot
            configuration: {
                adminNumbers: ADMIN_WHATSAPP_NUMBERS.split(','),
                maintenanceMode: await redisClient.get(MAINTENANCE_MODE_KEY),
                phoneNumberId: PHONE_NUMBER_ID
            },

            // M√©tricas del sistema
            systemMetrics: metricsCollector ? await metricsCollector.getSystemMetrics() : null,

            // Estado de salud
            healthStatus: healthChecker ? await healthChecker.performHealthCheck() : null
        };

        // Guardar en Redis como backup
        await redisClient.setEx('system:backup:latest', 604800, JSON.stringify(backupData)); // 7 d√≠as

        console.log('‚úÖ Backup del sistema creado exitosamente');
        return backupData;

    } catch (error) {
        console.error('‚ùå Error creando backup:', error);
        throw error;
    }
}

// Obtener todos los estados de usuario
async function getAllUserStates() {
    try {
        const keys = await redisClient.keys('*');
        const userStates = {};

        for (const key of keys) {
            if (key.match(/^\d+$/)) { // Solo claves que son n√∫meros (estados de usuario)
                const state = await redisClient.get(key);
                if (state) {
                    userStates[key] = JSON.parse(state);
                }
            }
        }

        return userStates;
    } catch (error) {
        console.error('Error obteniendo estados de usuario:', error);
        return {};
    }
}

// Limpiar datos antiguos
async function cleanupOldData() {
    try {
        const thirtyDaysAgo = Date.now() - (30 * 24 * 60 * 60 * 1000);
        const keys = await redisClient.keys('metrics:*');
        let cleanedCount = 0;

        for (const key of keys) {
            const ttl = await redisClient.ttl(key);
            if (ttl < 0) {
                const keyData = await redisClient.get(key);
                if (keyData) {
                    const data = JSON.parse(keyData);
                    if (data.timestamp && new Date(data.timestamp).getTime() < thirtyDaysAgo) {
                        await redisClient.del(key);
                        cleanedCount++;
                    }
                }
            }
        }

        console.log(`üßπ Limpieza completada: ${cleanedCount} m√©tricas antiguas eliminadas`);

    } catch (error) {
        console.error('‚ùå Error en limpieza:', error);
    }
}

// === ENDPOINTS DE MONITOREO ===

// Endpoint para m√©tricas
app.get('/api/metrics', async (req, res) => {
    try {
        if (!metricsCollector) {
            return res.status(503).json({ error: 'Sistema de monitoreo no disponible' });
        }
        const metrics = await metricsCollector.getSystemMetrics();
        res.json(metrics);
    } catch (error) {
        console.error('Error obteniendo m√©tricas:', error);
        res.status(500).json({ error: 'Error interno del servidor' });
    }
});

// Endpoint para estado de salud
app.get('/api/health', async (req, res) => {
    try {
        if (!healthChecker) {
            return res.status(503).json({ error: 'Health checker no disponible' });
        }
        const health = await healthChecker.performHealthCheck();
        res.json(health);
    } catch (error) {
        console.error('Error obteniendo estado de salud:', error);
        res.status(500).json({ error: 'Error interno del servidor' });
    }
});

// Endpoint para dashboard de monitoreo
app.get('/monitoring', (req, res) => {
    res.sendFile(path.join(__dirname, 'dashboard', 'monitoring.html'));
});

// Endpoint para backup manual
app.post('/api/backup', async (req, res) => {
    try {
        const backup = await createSystemBackup();
        res.json({
            success: true,
            message: 'Backup creado exitosamente',
            timestamp: backup.timestamp
        });
    } catch (error) {
        console.error('Error creando backup:', error);
        res.status(500).json({ error: 'Error creando backup' });
    }
});

// Inicializar monitoreo cuando Redis est√© listo
redisClient.on('ready', async () => {
    try {
        await initializeMonitoring();
        console.log('üéØ Sistema completo inicializado');
    } catch (error) {
        console.error('‚ùå Error en inicializaci√≥n de monitoreo:', error);
    }
});

// Manejo de cierre limpio
process.on('SIGINT', async () => {
    console.log('\nüîÑ Cerrando sistema...');

    try {
        if (metricsCollector) {
            await createSystemBackup();
        }

        if (wsServer) {
            wsServer.close();
        }

        console.log('‚úÖ Sistema cerrado limpiamente');
        process.exit(0);

    } catch (error) {
        console.error('‚ùå Error en cierre:', error);
        process.exit(1);
    }
});

app.listen(PORT, () => {
  console.log(`Servidor escuchando en el puerto ${PORT}`);
});