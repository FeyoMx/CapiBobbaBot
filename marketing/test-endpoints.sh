#!/bin/bash

# Script de prueba para endpoints de marketing
# Ejecutar despu√©s de que el deploy en Render est√© completo

API_URL="https://capibobbabot.onrender.com"

echo "üß™ Iniciando pruebas de endpoints de marketing..."
echo "================================================"
echo ""

# Test 1: Verificar que el servidor est√© activo
echo "1Ô∏è‚É£ Verificando servidor..."
curl -s "$API_URL/health" | grep -q "healthy" && echo "‚úÖ Servidor OK" || echo "‚ùå Servidor no responde"
echo ""

# Test 2: Listar campa√±as (debe estar vac√≠o inicialmente)
echo "2Ô∏è‚É£ Listando campa√±as existentes..."
curl -s "$API_URL/api/marketing/campaigns"
echo ""
echo ""

# Test 3: Crear campa√±a de prueba
echo "3Ô∏è‚É£ Creando campa√±a de prueba..."
CAMPAIGN_RESPONSE=$(curl -s -X POST "$API_URL/api/marketing/campaign/create" \
  -H "Content-Type: application/json" \
  -d '{
    "id": "test_tracking_2025_01",
    "name": "Campa√±a de Prueba - Sistema de Tracking",
    "templateName": "test_template",
    "description": "Primera campa√±a de prueba para validar el sistema de tracking"
  }')

echo "$CAMPAIGN_RESPONSE"
echo ""

# Verificar si se cre√≥ correctamente
echo "$CAMPAIGN_RESPONSE" | grep -q "success.*true" && echo "‚úÖ Campa√±a creada" || echo "‚ùå Error creando campa√±a"
echo ""

# Test 4: Verificar que aparece en la lista
echo "4Ô∏è‚É£ Verificando que la campa√±a aparece en la lista..."
curl -s "$API_URL/api/marketing/campaigns" | grep -q "test_tracking_2025_01" && echo "‚úÖ Campa√±a listada" || echo "‚ùå Campa√±a no aparece"
echo ""

# Test 5: Obtener detalle de la campa√±a
echo "5Ô∏è‚É£ Obteniendo detalle de la campa√±a..."
curl -s "$API_URL/api/marketing/campaign/test_tracking_2025_01"
echo ""
echo ""

# Test 6: Obtener estad√≠sticas (deben estar en 0)
echo "6Ô∏è‚É£ Obteniendo estad√≠sticas de la campa√±a..."
curl -s "$API_URL/api/marketing/campaign/test_tracking_2025_01/stats"
echo ""
echo ""

# Test 7: Simular registro de mensaje
echo "7Ô∏è‚É£ Simulando registro de mensaje..."
MESSAGE_RESPONSE=$(curl -s -X POST "$API_URL/api/marketing/register-message" \
  -H "Content-Type: application/json" \
  -d '{
    "messageId": "wamid.TEST123456789",
    "campaignId": "test_tracking_2025_01",
    "recipient": "5215512345678",
    "templateName": "test_template",
    "sentAt": '$(date +%s000)'
  }')

echo "$MESSAGE_RESPONSE"
echo ""
echo "$MESSAGE_RESPONSE" | grep -q "success.*true" && echo "‚úÖ Mensaje registrado" || echo "‚ùå Error registrando mensaje"
echo ""

# Test 8: Verificar que las stats se actualizaron
echo "8Ô∏è‚É£ Verificando actualizaci√≥n de estad√≠sticas..."
STATS=$(curl -s "$API_URL/api/marketing/campaign/test_tracking_2025_01/stats")
echo "$STATS" | grep -q '"totalSent":1' && echo "‚úÖ Stats actualizadas (totalSent: 1)" || echo "‚ö†Ô∏è  Stats no actualizadas"
echo ""

# Test 9: Obtener mensajes de la campa√±a
echo "9Ô∏è‚É£ Obteniendo mensajes de la campa√±a..."
curl -s "$API_URL/api/marketing/campaign/test_tracking_2025_01/messages"
echo ""
echo ""

# Test 10: Obtener dashboard stats general
echo "üîü Obteniendo estad√≠sticas del dashboard..."
curl -s "$API_URL/api/marketing/dashboard-stats"
echo ""
echo ""

echo "================================================"
echo "‚úÖ Pruebas completadas!"
echo ""
echo "üìã Pr√≥ximos pasos:"
echo "1. Verificar que todos los tests pasaron"
echo "2. Revisar los logs en Render para confirmar que no hay errores"
echo "3. Modificar el workflow de n8n (ID: qSKrf1OiNFS6ZbSu)"
echo "4. Enviar mensajes reales de prueba"
echo ""
echo "üìñ Consulta marketing/EJEMPLO_USO.md para m√°s informaci√≥n"
