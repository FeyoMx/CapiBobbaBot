{
	"info": {
		"_postman_id": "capibobbabot-marketing-2025",
		"name": "CapiBobbaBot - Marketing Campaigns",
		"description": "Colecci√≥n completa de endpoints para monitorear campa√±as de marketing de WhatsApp",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "üìä Monitoreo",
			"item": [
				{
					"name": "Dashboard General",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success field\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"// Alertas de tasas",
									"const jsonData = pm.response.json();",
									"if (jsonData.stats && jsonData.stats.averages) {",
									"    const deliveryRate = jsonData.stats.averages.deliveryRate;",
									"    if (deliveryRate < 75) {",
									"        console.log(\"‚ö†Ô∏è ALERTA: Tasa de entrega cr√≠tica: \" + deliveryRate + \"%\");",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/marketing/dashboard-stats",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"marketing",
								"dashboard-stats"
							]
						},
						"description": "Obtiene un resumen completo de todas las campa√±as activas y sus m√©tricas globales."
					},
					"response": []
				},
				{
					"name": "Listar Todas las Campa√±as",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains campaigns\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('campaigns');",
									"    pm.expect(jsonData).to.have.property('count');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/marketing/campaigns",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"marketing",
								"campaigns"
							]
						},
						"description": "Lista todas las campa√±as con sus estad√≠sticas b√°sicas."
					},
					"response": []
				},
				{
					"name": "Detalle de Campa√±a",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains campaign details\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('campaign');",
									"    pm.expect(jsonData.campaign).to.have.property('id');",
									"    pm.expect(jsonData.campaign).to.have.property('stats');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/marketing/campaign/{{CAMPAIGN_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"marketing",
								"campaign",
								"{{CAMPAIGN_ID}}"
							]
						},
						"description": "Obtiene informaci√≥n detallada de una campa√±a individual."
					},
					"response": []
				},
				{
					"name": "‚≠ê Estad√≠sticas Completas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response has complete stats\", function () {",
									"    pm.expect(jsonData).to.have.property('stats');",
									"    pm.expect(jsonData.stats).to.have.property('deliveryRate');",
									"    pm.expect(jsonData.stats).to.have.property('readRate');",
									"    pm.expect(jsonData.stats).to.have.property('failureRate');",
									"});",
									"",
									"// Alertas",
									"if (jsonData.stats && jsonData.stats.stats) {",
									"    const stats = jsonData.stats.stats;",
									"    ",
									"    // Alerta de entrega baja",
									"    if (stats.deliveryRate < 75) {",
									"        console.log(\"üî¥ CR√çTICO: Tasa de entrega: \" + stats.deliveryRate + \"%\");",
									"    }",
									"    ",
									"    // Alerta de fallas alta",
									"    if (stats.failureRate > 15) {",
									"        console.log(\"üî¥ CR√çTICO: Tasa de fallas: \" + stats.failureRate + \"%\");",
									"    }",
									"    ",
									"    // Alerta de engagement bajo",
									"    if (stats.readRate < 10 && stats.totalSent > 50) {",
									"        console.log(\"‚ö†Ô∏è ALERTA: Tasa de lectura baja: \" + stats.readRate + \"%\");",
									"    }",
									"    ",
									"    // Log de m√©tricas",
									"    console.log(\"üìä M√©tricas:\");",
									"    console.log(\"   Enviados: \" + stats.totalSent);",
									"    console.log(\"   Entregados: \" + stats.delivered + \" (\" + stats.deliveryRate + \"%)\");",
									"    console.log(\"   Le√≠dos: \" + stats.read + \" (\" + stats.readRate + \"%)\");",
									"    console.log(\"   Fallidos: \" + stats.failed + \" (\" + stats.failureRate + \"%)\");",
									"    console.log(\"   Reacciones: \" + stats.reactions + \" (\" + stats.engagementRate + \"%)\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/marketing/campaign/{{CAMPAIGN_ID}}/stats",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"marketing",
								"campaign",
								"{{CAMPAIGN_ID}}",
								"stats"
							]
						},
						"description": "Estad√≠sticas detalladas con tasas de conversi√≥n, distribuci√≥n de estados y an√°lisis de reacciones. **ENDPOINT PRINCIPAL DE MONITOREO**"
					},
					"response": []
				},
				{
					"name": "Lista de Mensajes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains messages\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('messages');",
									"    pm.expect(jsonData).to.have.property('count');",
									"});",
									"",
									"// Contar estados",
									"const jsonData = pm.response.json();",
									"if (jsonData.messages) {",
									"    const statuses = {sent: 0, delivered: 0, read: 0, failed: 0};",
									"    jsonData.messages.forEach(msg => {",
									"        if (statuses[msg.status] !== undefined) {",
									"            statuses[msg.status]++;",
									"        }",
									"    });",
									"    console.log(\"üì® Estados de mensajes:\");",
									"    console.log(\"   Sent: \" + statuses.sent);",
									"    console.log(\"   Delivered: \" + statuses.delivered);",
									"    console.log(\"   Read: \" + statuses.read);",
									"    console.log(\"   Failed: \" + statuses.failed);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/marketing/campaign/{{CAMPAIGN_ID}}/messages",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"marketing",
								"campaign",
								"{{CAMPAIGN_ID}}",
								"messages"
							]
						},
						"description": "Obtiene todos los mensajes enviados en una campa√±a con sus estados individuales."
					},
					"response": []
				},
				{
					"name": "An√°lisis de Reacciones",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains reaction stats\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('stats');",
									"    pm.expect(jsonData.stats).to.have.property('total');",
									"    pm.expect(jsonData.stats).to.have.property('bySentiment');",
									"});",
									"",
									"// Log de reacciones",
									"const jsonData = pm.response.json();",
									"if (jsonData.stats) {",
									"    console.log(\"üòÄ Reacciones totales: \" + jsonData.stats.total);",
									"    if (jsonData.stats.total > 0) {",
									"        console.log(\"   Positivas: \" + jsonData.stats.bySentiment.positive);",
									"        console.log(\"   Negativas: \" + jsonData.stats.bySentiment.negative);",
									"        console.log(\"   Neutrales: \" + jsonData.stats.bySentiment.neutral);",
									"        if (jsonData.stats.topEmojis.length > 0) {",
									"            console.log(\"   Top emoji: \" + jsonData.stats.topEmojis[0].emoji + \" (\" + jsonData.stats.topEmojis[0].count + \" veces)\");",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/marketing/campaign/{{CAMPAIGN_ID}}/reactions",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"marketing",
								"campaign",
								"{{CAMPAIGN_ID}}",
								"reactions"
							]
						},
						"description": "An√°lisis detallado de reacciones con sentimiento, emojis m√°s usados y patrones."
					},
					"response": []
				}
			],
			"description": "Endpoints de solo lectura para monitorear el rendimiento de las campa√±as."
		},
		{
			"name": "üîß Gesti√≥n",
			"item": [
				{
					"name": "Crear Nueva Campa√±a",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Campaign created successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData).to.have.property('campaign');",
									"});",
									"",
									"console.log(\"‚úÖ Campa√±a creada exitosamente\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"promo_nueva_campa√±a\",\n  \"name\": \"Nueva Campa√±a de Prueba\",\n  \"templateName\": \"template_nombre\",\n  \"description\": \"Descripci√≥n de la nueva campa√±a\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/marketing/campaign/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"marketing",
								"campaign",
								"create"
							]
						},
						"description": "Crea una nueva campa√±a de marketing. Editar el body con los datos reales antes de enviar."
					},
					"response": []
				},
				{
					"name": "Desactivar Campa√±a",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Campaign status updated\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"console.log(\"‚è∏Ô∏è Campa√±a desactivada\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"active\": false\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/marketing/campaign/{{CAMPAIGN_ID}}/status",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"marketing",
								"campaign",
								"{{CAMPAIGN_ID}}",
								"status"
							]
						},
						"description": "Desactiva una campa√±a existente para que no reciba m√°s mensajes."
					},
					"response": []
				},
				{
					"name": "Activar Campa√±a",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Campaign status updated\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"console.log(\"‚ñ∂Ô∏è Campa√±a activada\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"active\": true\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/marketing/campaign/{{CAMPAIGN_ID}}/status",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"marketing",
								"campaign",
								"{{CAMPAIGN_ID}}",
								"status"
							]
						},
						"description": "Activa una campa√±a para que pueda recibir nuevos mensajes."
					},
					"response": []
				},
				{
					"name": "Registrar Mensaje (n8n)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Message registered\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"console.log(\"üì® Mensaje registrado\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"messageId\": \"wamid.HBgNNTIxNTUyMjQwMzQ3NRUCABIYIDY0ODhFMTdDMjc2OEJCNDY4MUFGMTI4RjY4ODJDNDE3AA==\",\n  \"campaignId\": \"{{CAMPAIGN_ID}}\",\n  \"recipient\": \"5215512345678\",\n  \"templateName\": \"capicombo_video\",\n  \"status\": \"sent\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/marketing/register-message",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"marketing",
								"register-message"
							]
						},
						"description": "Registra un nuevo mensaje enviado. Este endpoint es usado por n8n. Para pruebas manuales, cambiar messageId y recipient."
					},
					"response": []
				}
			],
			"description": "Endpoints de escritura para gestionar campa√±as y registrar mensajes."
		},
		{
			"name": "üè• Sistema",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"System is healthy\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('healthy');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/health",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Verifica que el servidor est√© funcionando correctamente."
					},
					"response": []
				},
				{
					"name": "M√©tricas del Sistema",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/metrics",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"metrics"
							]
						},
						"description": "Obtiene m√©tricas generales del sistema (memoria, CPU, uptime, etc.)"
					},
					"response": []
				}
			],
			"description": "Endpoints para verificar el estado del sistema."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "https://capibobbabot.onrender.com",
			"type": "string"
		},
		{
			"key": "CAMPAIGN_ID",
			"value": "promo_capicombovideo_18_10_25",
			"type": "string"
		}
	]
}
